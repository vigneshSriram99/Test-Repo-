<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjProjectV2Entity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProjProjectV2Entity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        if (!this.skipNumberSequenceCheck())
        {
            NumberSeqRecordFieldHandler::enableNumberSequenceControlForField(
                this, fieldNum(ProjProjectV2Entity, ProjectId), ProjParameters::numRefProjId());
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapEntityToDataSource</Name>
				<Source><![CDATA[
    public void mapEntityToDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        switch (_dataSourceCtx.name())
        {
            case dataEntityDataSourceStr(ProjProjectV2Entity,ProjTable):
                ProjTable projTable = _dataSourceCtx.getBuffer();

                ProjSorting projSorting;

                if (this.isFieldSet(fieldNum(ProjProjectV2Entity, SortingField1)))
                {
                    if (!this.SortingField1)
                    {
                        projTable.sortingId[1] = "";
                    }
                    else
                    {
                        select firstonly RecId from projSorting where projSorting.sortingId == this.SortingField1 && projSorting.SortCode == ProjSortValue::Sorting1;

                        if (projSorting.RecId != 0)
                        {
                            projTable.sortingId[1] = this.SortingField1;
                        }
                    }
                }

                if (this.isFieldSet(fieldNum(ProjProjectV2Entity, SortingField2)))
                {
                    projSorting.clear();

                    if (!this.SortingField2)
                    {
                        projTable.sortingId[2] = "";
                    }
                    else
                    {
                        select firstonly RecId from projSorting where projSorting.sortingId == this.SortingField2 && projSorting.SortCode == ProjSortValue::Sorting2;

                        if (projSorting.RecId != 0)
                        {
                            projTable.sortingId[2] = this.SortingField2;
                        }
                    }
                }

                if (this.isFieldSet(fieldNum(ProjProjectV2Entity, SortingField3)))
                {
                    projSorting.clear();

                    if (!this.SortingField3)
                    {
                        projTable.sortingId[3] = "";
                    }
                    else
                    {
                        select firstonly RecId from projSorting where projSorting.sortingId == this.SortingField3 && projSorting.SortCode == ProjSortValue::Sorting3;

                        if (projSorting.RecId != 0)
                        {
                            projTable.sortingId[3] = this.SortingField3;
                        }
                    }
                }

                if (this.isFieldSet(fieldNum(ProjProjectV2Entity, CustomerAccountNumber)))
                {
                    this.initFromCustAccount(this.CustomerAccountNumber);
                }
                break;

            case dataEntityDataSourceStr(ProjProjectV2Entity, ProjDataSource):
                if (_dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Update)
                {
                    ProjDataSource::findOrCreateProjDataSource(this.IntegrationSourceDataId);
                }
                break;
        }

        //calling super will then map the field value set on the data entity to the underlying data source.
        //in thise case, since we're modifying the entity field, we need to call super so that it can be propagated to the data source buffer.
        super(_entityCtx, _dataSourceCtx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCustAccount</Name>
				<Source><![CDATA[
    private void initFromCustAccount(CustAccount _custAccount)
    {
        CustTable custTable = CustTable::find(_custAccount);
        this.SalesTaxGroupId = custTable.TaxGroup;
        this.Dimension = CustTable.DefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertEntityDataSource</Name>
				<Source><![CDATA[
    public boolean insertEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        this.checkProjOpsFeatureStatus();

        ProjOpsIntegrationLogger logger = ProjOpsIntegrationLogger::createLogger(dataentityviewstr(ProjProjectV2Entity));
        ProjOpsIntegrationInstrumentationActivites entityActivities = logger.projOpsIntegrationActivity();
        boolean ret;
        using (var activityContext = entityActivities.insertEntityContext())
        {
            if (_dataSourceCtx.name() == dataEntityDataSourceStr(ProjProjectV2Entity, ProjTable))
            {
                ProjTable projTable = _dataSourceCtx.getBuffer() as ProjTable;
                projTable.validateProjId(projTable.ProjId);
            }

            this.logTelemetry(_dataSourceCtx, activityContext);
            ret = super(_entityCtx, _dataSourceCtx);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateEntityDataSource</Name>
				<Source><![CDATA[
    public boolean updateEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        this.checkProjOpsFeatureStatus();

        ProjOpsIntegrationLogger logger = ProjOpsIntegrationLogger::createLogger(dataentityviewstr(ProjProjectV2Entity));
        ProjOpsIntegrationInstrumentationActivites entityActivities = logger.projOpsIntegrationActivity();
        boolean ret;

        using (var activityContext = entityActivities.updateEntityContext())
        {
            this.logTelemetry(_dataSourceCtx, activityContext);

            if (this.allowProjStatusUpdate(_entityCtx, _dataSourceCtx))
            {
                this.skipDataSourceValidateField(fieldNum(ProjProjectV2Entity, ProjectStage), true);

                this.blockProjectFinishWithOpenTrans(_entityCtx, _dataSourceCtx);
            }

            ret = super(_entityCtx, _dataSourceCtx);
        
            // If the project dimension attribute has been set to "copy on create",
            // project dimension value will be overwritten using project Id.
            if (ret &&
                _dataSourceCtx.name() == dataEntityDataSourceStr(ProjProjectV2Entity, ProjTable) &&
                this.isFieldSet(fieldNum(ProjProjectV2Entity, CustomerAccountNumber)))
            {
                ProjTable projTable = _dataSourceCtx.getBuffer() as ProjTable;
            
                DimensionDefaultFacade::copyDimensionValueToDefaultDimensionField(projTable, fieldNum(ProjTable, ProjId), projtable, fieldNum(ProjTable, DefaultDimension), true);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowProjStatusUpdate</Name>
				<Source><![CDATA[
    protected boolean allowProjStatusUpdate(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        // Allow project status update (active -> In process, inactive -> Finished) for ProjOps integration
        boolean ret = _dataSourceCtx.name() == dataEntityDataSourceStr(ProjProjectV2Entity, ProjTable)
            && this.isFieldModified(fieldNum(ProjProjectV2Entity, ProjectStage))
            && (this.ProjectStage == ProjStatus::InProcess || this.ProjectStage == ProjStatus::Completed);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>blockProjectFinishWithOpenTrans</Name>
				<Source><![CDATA[
    protected void blockProjectFinishWithOpenTrans(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        // only run a check when project is updated to Finished
        if (this.ProjectStage == ProjStatus::Completed)
        {
            ProjTable projTable = _dataSourceCtx.getBuffer() as ProjTable;
            if (!projTable.type().hasNoOpenTransaction())
            {
                throw error("@Proj:ProjectClosureValidation");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteEntityDataSource</Name>
				<Source><![CDATA[
    public boolean deleteEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        this.checkProjOpsFeatureStatus();

        ProjOpsIntegrationLogger logger = ProjOpsIntegrationLogger::createLogger(dataentityviewstr(ProjProjectV2Entity));
        ProjOpsIntegrationInstrumentationActivites entityActivities = logger.projOpsIntegrationActivity();
        boolean ret;
        using (var activityContext = entityActivities.deleteEntityContext())
        {
            this.logTelemetry(_dataSourceCtx, activityContext);
            ret = super(_entityCtx, _dataSourceCtx);
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>logTelemetry</Name>
				<Source><![CDATA[
    private void logTelemetry(DataEntityDataSourceRuntimeContext _dataSourceCtx, SysInstrumentationActivityContext _activityContext)
    {
        _activityContext.addCustomProperty(ProjOpsIntegrationInstrumentationActivites::DataSource, any2Str(_dataSourceCtx.name()));
        _activityContext.addCustomProperty(ProjOpsIntegrationInstrumentationActivites::ProjectId, any2Str(this.ProjectId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkProjOpsFeatureStatus</Name>
				<Source><![CDATA[
    private void checkProjOpsFeatureStatus()
    {
        DataAreaId dataAreaId = this.DataAreaId ? this.DataAreaId : curExt();
        if (!ProjProjectOperationsIntegrationFeatureHelper::isFeatureEnabled(dataAreaId))
        {
            throw error(strFmt("@ProjectOperations:ProjProjectOperationsIntegrationFeatureEntityValidation", dataAreaId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaultScheduleStartDate</Name>
				<Source><![CDATA[
    private void setDefaultScheduleStartDate()
    {
        if (this.isFieldSet(fieldNum(ProjProjectV2Entity,SchedulingCalendarId)) && this.isFieldSet(fieldNum(ProjProjectV2Entity, ProjectedStartDate)))
        {
            if (!WorkCalendarDate::isPickupDate(this.SchedulingCalendarId, this.ProjectedStartDate))
            {
                this.ScheduleStartDate  = WorkCalendar::findOpenDateForward(this.SchedulingCalendarId, this.ProjectedStartDate, 0);
            }
            else
            {
                this.ScheduleStartDate  = this.ProjectedStartDate;
            }
        }
        else  if (this.isFieldSet(fieldNum(ProjProjectV2Entity, ProjectedStartDate)))
        {
            this.ScheduleStartDate  = this.ProjectedStartDate;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaultScheduleEndDate</Name>
				<Source><![CDATA[
    private void setDefaultScheduleEndDate()
    {
        if (this.isFieldSet(fieldnum(ProjProjectV2Entity, ProjectedEndDate)))
        {
            this.ScheduleEndDate = this.ProjectedEndDate;
        }
        else if (this.isFieldSet(fieldNum(ProjProjectV2Entity, ScheduleStartDate)))
        {
            this.ScheduleEndDate = this.ScheduleStartDate;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultRow</Name>
				<Source><![CDATA[
    public void defaultRow()
    {
        // DW mapping will set fields which have no value, which causes
        // invalid downstream validation to fail in this case. Hence
        // mark blank ProjectedEndDate as unset if we're doing an insert. It's
        // important that this validation happens before defaulting logic.
        if (!this.RecId)
        {
            this.setBlankFieldStateToNotSet(fieldNum(ProjProjectV2Entity, ProjectedEndDate));
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultField</Name>
				<Source><![CDATA[
    public void defaultField(FieldId _fieldId)
    {
        super(_fieldId);
        if (!this.isFieldSet(_fieldId))
        {
            switch (_fieldId)
            {
                case fieldNum(ProjProjectV2Entity, ScheduleStartDate):
                    this.setDefaultScheduleStartDate();
                    break;

                case fieldNum(ProjProjectV2Entity, ScheduleEndDate):
                    this.setDefaultScheduleEndDate();
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExtension</Name>
				<Source><![CDATA[
    public TableExtension getExtension()
    {
        return new SysTableExtension();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultingDependencies</Name>
				<Source><![CDATA[
    public container getDefaultingDependencies()
    {
        return [
                [
                fieldnum (ProjProjectV2Entity, CustomerAccountNumber),
                    [
                        fieldnum (ProjProjectV2Entity, ProjectContractId)
                    ]
                ],
                [
                fieldnum (ProjProjectV2Entity, ScheduleStartDate),
                    [
                        fieldnum (ProjProjectV2Entity, ProjectedStartDate),
                        fieldnum (ProjProjectV2Entity, SchedulingCalendarId)
                    ]
                ],
                [
                fieldnum (ProjProjectV2Entity, ScheduleEndDate),
                    [
                        fieldnum (ProjProjectV2Entity, ProjectedEndDate),
                        fieldnum (ProjProjectV2Entity, ScheduleStartDate)
                    ]
                ]
              ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>findEntityDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the record of the related datasources if the foreign key is part of the entity projection
    /// </summary>
    /// <param name = "_entityCtx">
    /// The data entity runtime context
    /// </param>
    /// <param name = "_dataSourceCtx">
    /// The related datasource context
    /// </param>
    /// <returns>
    /// The record buffer of the related datasource.
    /// </returns>
    public Common findEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        Common ret;

        switch (_dataSourceCtx.name())
        {
            case dataEntityDataSourceStr(ProjProjectV2Entity, LogisticsLocation):
                ret = LogisticsLocation::findByLocationId(this.DeliveryAddressLocationId);

                if (ret.RecId == 0)
                {
                    LogisticsLocation location = _dataSourceCtx.getBuffer();
                    location.LocationID = '';
                }

                break;

            case dataEntityDataSourceStr(ProjectEntity, ProjFundingSource):
                if (ProjItemRequirementMultipleFundingSourcesFeatureHelper::isFeatureEnabled())
                {
                    ret = ProjFundingSource::findContractFundingSource(this.ProjectContractID, this.DefaultInvoiceAccount);
                }

                break;

            default:
                ret = super(_entityCtx, _dataSourceCtx);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>persistEntity</Name>
				<Source><![CDATA[
    public void persistEntity(DataEntityRuntimeContext _entityCtx)
    {
        if (!this.ParentProjectId)
        {
            this.skipDataSourceValidateField(fieldNum(ProjProjectV2Entity, ParentProjectId), true);
        }

        if (_entityCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Insert)
        {
            this.Dimension = DimensionDefaultResolver::checkAndCreateSelfReference(tablenum(ProjTable), this.ProjectId, this.DimensionDisplayValue);
        }

        super(_entityCtx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postLoad</Name>
				<Source><![CDATA[
    public void postLoad()
    {
        super();

        boolean isValid = this.checkDataAreaAccessible(this.DataAreaId);

        if (isValid)
        {
            changecompany(this.DataAreaId)
            {
                ProjTable localProj;

                select firstonly RecId,sortingId from localProj where localProj.ProjId == this.ProjectID;
        
                if (localProj.RecId != 0)
                {
                    this.SortingField1 = localProj.sortingId[1];
                    this.SortingField2 = localProj.sortingId[2];
                    this.SortingField3 = localProj.sortingId[3];
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postGetStagingData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resolve conflicts in the ordering of data import such that dependent records insert after parent records.
    /// </summary>
    /// <param name = "_dmfDefinitionGroupExecution">The execution context for import.</param>
    public static void postGetStagingData(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution)
    {
        ProjectStaging::resolveImportSequence(_dmfDefinitionGroupExecution);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDataAreaAccessible</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the Company value is valid or not.
    /// </summary>
    /// <returns>
    /// true if the Company is valid; otherwise, false.
    /// </returns>
    private boolean checkDataAreaAccessible(SelectableDataArea dataAreaId)
    {
        const str CheckDataAreaAccessible = 'CheckDataAreaAccessible';
        SysGlobalCache cache = classfactory.globalCache();
        boolean isValid;

        if (cache.isSet(CheckDataAreaAccessible, dataAreaId))
        {
            isValid = cache.get(CheckDataAreaAccessible, dataAreaId);
        }
        else
        {
            isValid = xDataArea::exist(dataAreaId);
            cache.set(CheckDataAreaAccessible, dataAreaId, isValid);
        }

        return isValid;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Project</ConfigurationKey>
	<DeveloperDocumentation>@Proj:ProjProjectV2EntityDevDoc</DeveloperDocumentation>
	<FormRef>ProjTable</FormRef>
	<Label>@Proj:ProjProjectV2EntityLabel</Label>
	<Tags>Projects master</Tags>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>ProjProjectV2Staging</DataManagementStagingTable>
	<IsPublic>Yes</IsPublic>
	<Modules>ProjectManagementAndAccounting</Modules>
	<PrimaryCompanyContext>DataAreaId</PrimaryCompanyContext>
	<PrimaryKey>EntityKey</PrimaryKey>
	<PublicCollectionName>ProjectsV2</PublicCollectionName>
	<PublicEntityName>ProjectV2</PublicEntityName>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjectId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjectName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjectContractId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjectGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjectedStartDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjectedEndDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ZakatSubject</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ZakatContractAmendment</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ZakatContractDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ZakatContractPeriod</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ZakatProjectValue</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjectId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjectName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProjectId</Name>
			<Mandatory>No</Mandatory>
			<DataField>ProjId</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AlternateProjectId</Name>
			<DataField>AlternateBudgetProject</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>BankDocumentType</Name>
			<DataField>BankDocumentType</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>IsCertifiedPayroll</Name>
			<DataField>CertifiedPayroll</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CanVerifyCostAgainstRemainingForecast</Name>
			<DataField>CheckBudget</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ZakatContractAmendment</Name>
			<Mandatory>No</Mandatory>
			<DataField>ContractAmendment_SA</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ZakatContractDate</Name>
			<Mandatory>No</Mandatory>
			<DataField>ContractDate_SA</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ZakatContractPeriod</Name>
			<Mandatory>No</Mandatory>
			<DataField>ContractPeriod_SA</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ZakatProjectValue</Name>
			<Mandatory>No</Mandatory>
			<DataField>ContractValue_SA</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DateOfCreation</Name>
			<DataField>Created</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CustomerAccountNumber</Name>
			<DataField>CustAccount</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Dimension</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>DefaultDimension</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DeliveryLocation</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>DeliveryLocation</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DeliveryName</Name>
			<DataField>DlvName</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Email</Name>
			<DataField>Email</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ActualEndDate</Name>
			<DataField>EndDate</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ExtensionDate</Name>
			<DataField>ExtensionDate</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>SubprojectIdFormat</Name>
			<DataField>Format</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>IsHeader</Name>
			<DataField>Header</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>JobIdentification</Name>
			<DataField>JobId</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProjectName</Name>
			<Mandatory>No</Mandatory>
			<DataField>Name</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>IsOCIPWorkerCompensation</Name>
			<DataField>OCIP</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>IsOCIPGeneralLiability</Name>
			<DataField>OCIPGL</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ParentProjectId</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<DataField>ProjId</DataField>
			<DataSource>ParentProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TransactionTypesControlled</Name>
			<DataField>ProjBudgetaryControlOn</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>BudgetControlInterval</Name>
			<DataField>ProjBudgetInterval</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProjectBudgetManagement</Name>
			<DataField>ProjBudgetManagement</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>BudgetOverrunDefault</Name>
			<DataField>ProjBudgetOverrunOption</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AllowNegativeBudgetsToBeCarriedForward</Name>
			<DataField>ProjCarryForwardNegativeBudget</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CanCarryForwardRemainingBudgets</Name>
			<DataField>ProjCarryForwardRemainingBudget</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProjectedEndDate</Name>
			<DataField>ProjectedEndDate</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProjectedStartDate</Name>
			<Mandatory>No</Mandatory>
			<DataField>ProjectedStartDate</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProjectGroupId</Name>
			<DataField>ProjGroupId</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProjectContractId</Name>
			<DataField>ProjInvoiceProjId</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>LedgerPostingSortPriority</Name>
			<DataField>ProjLedgerPosting</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>LinePropertySearchPriority</Name>
			<DataField>ProjLinePropertySearch</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>SalesPriceGroupId</Name>
			<DataField>ProjPriceGroup</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>SchedulingCalendarId</Name>
			<DataField>PSASchedCalendarId</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DefaultScheduleDate</Name>
			<IsObsolete>Yes</IsObsolete>
			<DataField>PSASchedDefaultDate</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ScheduleDurationInDays</Name>
			<DataField>PSASchedDuration</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TotalPlannedEffortInHours</Name>
			<DataField>PSASchedEffort</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ScheduleEndDate</Name>
			<DataField>PSASchedEndDate</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>IsResourceCalendarIgnored</Name>
			<DataField>PSASchedIgnoreCalendar</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ScheduleStartDate</Name>
			<Mandatory>Yes</Mandatory>
			<DataField>PSASchedStartDate</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>IsActivityRequiredForExpenseForecast</Name>
			<DataField>RequireActivityExpenseForecast</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>IsActivityRequiredForExpenseTransaction</Name>
			<DataField>RequireActivityExpenseTrx</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>IsActivityRequiredForHourForecast</Name>
			<DataField>RequireActivityHourForecast</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>IsActivityRequiredForHourTransaction</Name>
			<DataField>RequireActivityHourTrx</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>IsActivityRequiredForItemForecast</Name>
			<DataField>RequireActivityItemForecast</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>IsActivityRequiredForItemTransaction</Name>
			<DataField>RequireActivityItemTrx</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ActualStartDate</Name>
			<DataField>StartDate</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProjectStage</Name>
			<AllowEdit>Yes</AllowEdit>
			<DataField>Status</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ZakatSubject</Name>
			<Mandatory>No</Mandatory>
			<DataField>Subject_SA</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>SalesTaxGroupId</Name>
			<DataField>TaxGroupId</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>IsProjectTemplate</Name>
			<DataField>Template</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PostingLevel</Name>
			<DataField>TimePostDetailSummary</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CanUseAlternateProjectBudget</Name>
			<DataField>UseAlternateProject</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>IsBudgetControlEnabled</Name>
			<DataField>UseBudgeting</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>IsProjectCategoryValidationEnabled</Name>
			<DataField>ValidateProjCategory</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>EstimateProjectId</Name>
			<DataField>WIPProject</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ArchitectRecId</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>WorkerPSAArchitect</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProjectManagerRecId</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>WorkerResponsible</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProjectControllerRecId</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>WorkerResponsibleFinancial</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>SalesManagerRecId</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>WorkerResponsibleSales</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Description</Name>
			<DataField>Description</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>IsTemplateApplied</Name>
			<DataField>TemplateApplied</DataField>
			<DataSource>ProjTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DeliveryAddressLocationId</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<DataField>LocationId</DataField>
			<DataSource>LogisticsLocation</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ArchitectPersonnelNumber</Name>
			<Mandatory>No</Mandatory>
			<DataField>PersonnelNumber</DataField>
			<DataSource>ArchitectWorker</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProjectControllerPersonnelNumber</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@SYS92681</Label>
			<Mandatory>No</Mandatory>
			<DataField>PersonnelNumber</DataField>
			<DataSource>ProjectControllerWorker</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProjectManagerPersonnelNumber</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@SYS70488</Label>
			<Mandatory>No</Mandatory>
			<DataField>PersonnelNumber</DataField>
			<DataSource>ProjectManagerWorker</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>SalesManagerPersonnelNumber</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@SYS79867</Label>
			<Mandatory>No</Mandatory>
			<DataField>PersonnelNumber</DataField>
			<DataSource>SalesManagerWorker</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DimensionDisplayValue</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<DataField>DisplayValue</DataField>
			<DataSource>DimensionDAVS</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>SortingField1</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@SYS54053</Label>
			<IsComputedField>No</IsComputedField>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>SortingField2</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@SYS54054</Label>
			<IsComputedField>No</IsComputedField>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>SortingField3</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@SYS54055</Label>
			<IsComputedField>No</IsComputedField>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>IntegrationSourceDataId</Name>
			<AllowEdit>Yes</AllowEdit>
			<Mandatory>No</Mandatory>
			<DataField>SourceId</DataField>
			<DataSource>ProjDataSource</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DefaultInvoiceAccount</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<FeatureClass>ProjItemRequirementMultipleFundingSources</FeatureClass>
			<Mandatory>No</Mandatory>
			<DataField>FundingSourceId</DataField>
			<DataSource>ProjFundingSource</DataSource>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>ProjectId</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations>
		<AxDataEntityViewRelation xmlns=""
			i:type="AxDataEntityViewRelationForeignKey">
			<Name>DimensionDimensionSet</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedDataEntity>DimensionSetEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ZeroOne</RelatedDataEntityCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>Dimension</Name>
					<Field>Dimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
		</AxDataEntityViewRelation>
	</Relations>
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>ProjTable</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>ProjTable</Table>
				<DataSources>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>LogisticsLocation</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>LogisticsLocation</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<UseRelations>Yes</UseRelations>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>LogisticsLocation</Name>
								<JoinRelationName>LogisticsLocation</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>ArchitectWorker</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>HcmWorker</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>WorkerPSAArchitect</Field>
								<JoinDataSource>ProjTable</JoinDataSource>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>ProjectControllerWorker</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>HcmWorker</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>WorkerResponsibleFinancial</Field>
								<JoinDataSource>ProjTable</JoinDataSource>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>ProjectManagerWorker</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>HcmWorker</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>WorkerResponsible</Field>
								<JoinDataSource>ProjTable</JoinDataSource>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>SalesManagerWorker</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>HcmWorker</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>WorkerResponsibleSales</Field>
								<JoinDataSource>ProjTable</JoinDataSource>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>DimensionDAVS</Name>
						<AllowAdd>No</AllowAdd>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>DimensionSetEntity</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>DimensionDAVS</Name>
								<Field>DefaultDimension</Field>
								<JoinDataSource>ProjTable</JoinDataSource>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>ParentProjTable</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>ProjTable</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>ParentId</Field>
								<JoinDataSource>ProjTable</JoinDataSource>
								<RelatedField>ProjId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>ProjDataSource</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>ProjDataSource</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>ProjDataSource</Field>
								<JoinDataSource>ProjTable</JoinDataSource>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>ProjFundingSource</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>ProjFundingSource</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>DefaultFundingSource</Field>
								<JoinDataSource>ProjTable</JoinDataSource>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
				</DataSources>
				<DerivedDataSources />
				<Fields />
				<Ranges>
					<AxQuerySimpleDataSourceRange>
						<Name>Type</Name>
						<Field>Type</Field>
						<Status>Hidden</Status>
						<Value>None</Value>
					</AxQuerySimpleDataSourceRange>
				</Ranges>
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>