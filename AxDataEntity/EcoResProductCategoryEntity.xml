<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResProductCategoryEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class EcoResProductCategoryEntity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getExtension</Name>
				<Source><![CDATA[
    public TableExtension getExtension()
    {
        return SysTableExtension::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultingDependencies</Name>
				<Source><![CDATA[
    public container getDefaultingDependencies()
    {
        return [
            // [field that needs defaulting,
            //      [fields that affect the default value]]

            [fieldNum(EcoResProductCategoryEntity, FriendlyCategoryName)]
        ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultField</Name>
				<Source><![CDATA[
    public void defaultField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(EcoResProductCategoryEntity, FriendlyCategoryName):
                if (!this.isFieldSet(fieldNum(EcoResProductCategoryEntity, FriendlyCategoryName)) && !this.FriendlyCategoryName)
                {
                    this.FriendlyCategoryName = this.CategoryName;
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();
        //Description field is set to allow the creation of record for outerjoined EcoResCategoryTranslation table.
        this.CategoryDescription = "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        if (ret)
        {
            if (this.IsCategoryInheritingParentCategoryAttributes == NoYes::Yes && this.ParentProductCategoryName == "")
            {
                ret = checkFailed("@SCM:ProductAttributeInheritanceNotAllowed");
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapEntityToDataSource</Name>
				<Source><![CDATA[
    public void mapEntityToDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        super(_entityCtx, _dataSourceCtx);

        switch (_dataSourceCtx.name())
        {
            case dataEntityDataSourceStr(EcoResProductCategoryEntity, EcoResCategory):
                EcoResCategoryHierarchy ecoResCategoryHierarchy = EcoResCategoryHierarchy::findByName(this.ProductCategoryHierarchyName);

                EcoResCategory ecoResParentCategory = _entityCtx.getRuntimeContextByName(dataEntityDataSourceStr(EcoResProductCategoryEntity, ParentEcoResCategory)).getBuffer();
                ecoResParentCategory.CategoryHierarchy = ecoResCategoryHierarchy.RecId;

                EcoResCategory ecoResCategory = _dataSourceCtx.getBuffer();

                if (_entityCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Insert)
                {
                    if (this.ParentProductCategoryName == "")
                    {
                        ecoResCategory =  EcoResCategory::createHierarchyRoot(ecoResCategoryHierarchy.RecId, this.CategoryName);
                        ecoResCategory.Code = this.CategoryCode;
                        ecoResCategory.IsTangible = this.IsTangibleProduct;
                        _dataSourceCtx.setBuffer(ecoResCategory);

                        //Insert is already done in createHierarchyRoot
                        _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::Update);
                    }
                    else
                    {
                        ecoResParentCategory = EcoResCategory::findByName(this.ParentProductCategoryName, ecoResCategoryHierarchy.RecId);
                        ecoResCategory.ParentCategory = ecoResParentCategory.RecId;
                        ecoResCategory.addToHierarchy();
                    }
                }
                break;
            case dataEntityDataSourceStr(EcoResProductCategoryEntity, SharedCategory):
                if (_entityCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Update)
                {
                    if (this.ProjectCategoryName != '' && this.allowEditProjectCategory())
                    {
                        SharedCategory sharedCategoryLocal;

                        if (this.DefaultProjectGlobalCategoryId)
                        {
                            select firstonly sharedCategoryLocal
                            where sharedCategoryLocal.categoryName == this.ProjectCategoryName
                               && sharedCategoryLocal.CategoryId   == this.DefaultProjectGlobalCategoryId;
                        }
                        
                        if (!sharedCategoryLocal)
                        {
                            select firstonly sharedCategoryLocal where sharedCategoryLocal.categoryName == this.ProjectCategoryName;
                        }

                        if (sharedCategoryLocal.RecId)
                        {
                            _dataSourceCtx.setBuffer(sharedCategoryLocal);
                        }
                    }
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>persistEntity</Name>
				<Source><![CDATA[
    public void persistEntity(DataEntityRuntimeContext _entityCtx)
    {
        boolean mustSyncAttributes = (_entityCtx.isDatabaseOperationInsert() || _entityCtx.isDatabaseOperationUpdate())
            && this.isFieldModified(fieldNum(EcoResProductCategoryEntity, IsCategoryInheritingParentProductAttributes));

        super(_entityCtx);

        if (mustSyncAttributes)
        {
            EcoResCategoryAttributeLookup::synchronizeWithCategoryAttribute(EcoResCategory::find(this.RecId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowEditProjectCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// A boolean value indicating whether the project category can be editable.
    /// </summary>
    /// <returns>true for categories where project category is not applicable for the project category hierarchy;otherwise false</returns>
    private boolean allowEditProjectCategory()
    {
        EcoResCategoryHierarchy ecoResCategoryHierarchy = EcoResCategoryHierarchy::findByName(this.ProductCategoryHierarchyName);
        
        return ecoResCategoryHierarchy.allowEditProjectGlobalCategory();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertEntityDataSource</Name>
				<Source><![CDATA[
    public boolean insertEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        switch (_dataSourceCtx.name())
        {
            case dataEntityDataSourceStr(EcoResProductCategoryEntity, SharedCategory):
                if (this.ProjectCategoryName == '' || !this.allowEditProjectCategory())
                {
                    return true;
                }
                break;                
                
            case dataEntityDataSourceStr(EcoResProductCategoryEntity, EcoResCategory):
                if (this.ParentProductCategoryName)
                {
                    //Insert is already done in mapEntityToDataSource (addToHierarchy)
                    return true;
                }          
        }

        return super(_entityCtx, _dataSourceCtx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postGetStagingData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes logic after importing all data into the staging table.
    /// </summary>
    /// <param name = "_dmfDefinitionGroupExecution">
    /// The definition group and execution instance for which staging data should be processed.
    /// </param>
    public static void postGetStagingData(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution)
    {
        EcoResProductCategoryStaging::generateImportSequence(_dmfDefinitionGroupExecution);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postLoad</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generate the values for the virtual field DefaultProjectGlobalCategoryId.
    /// </summary>
    public void postLoad()
    {
        super();

        if (!this.DefaultProjectGlobalCategoryId && this.RecId)
        {
            this.DefaultProjectGlobalCategoryId = SharedCategory::findRecId(EcoResCategory::find(this.RecId).DefaultProjectGlobalCategory).CategoryId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parentProductCategoryHierarchyNameDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates the definition of the parent product category hierarchy name computed column.
    /// </summary>
    /// <returns>The computed column definition</returns>
    public static str parentProductCategoryHierarchyNameDefinition()
    {
        TableName productCategoryEntityViewName = dataentityviewstr(EcoResProductCategoryEntity);

        return SysComputedColumn::if(
            SysComputedColumn::notEqualExpression(SysComputedColumn::comparisonField(productCategoryEntityViewName, dataEntityDataSourceStr(EcoResProductCategoryEntity, EcoResCategory), fieldStr(EcoResCategory, ParentCategory)),
                SysComputedColumn::comparisonLiteral(0)),
            SysComputedColumn::returnField(productCategoryEntityViewName, dataEntityDataSourceStr(EcoResProductCategoryEntity, EcoResCategoryHierarchy), fieldStr(EcoResCategoryHierarchy, Name)),
            SysComputedColumn::returnLiteral(''));
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret;

        ret = super();

        EcoResCategory ecoResCategory = EcoResCategory::find(this.CategoryRecordId);
    
        return ret && ecoResCategory && ecoResCategory.validateDelete();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteEntityDataSource</Name>
				<Source><![CDATA[
    public boolean deleteEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        boolean ret = false;
        if (_dataSourceCtx.name() == dataEntityDataSourceStr(EcoResProductCategoryEntity, EcoResCategory))
        {
            EcoResCategory ecoResCategory = _dataSourceCtx.getBuffer();
            if (ecoResCategory)
            {
                if (!ecoResCategory.getChildCount())
                {
                    ecoResCategory.delete();
                    ret = true;
                }
                else
                {
                    throw error("@SCM:EcoResProductCategoryCouldNotDeleteChildNodes");
                }
            }
        }
        else
        {
            ret = super(_entityCtx, _dataSourceCtx);
        }
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SCM:DevDocProductCategoryEntity</DeveloperDocumentation>
	<FormRef>EcoResCategoryHierarchyDetails</FormRef>
	<Label>@SCM:ProductCategories</Label>
	<Tags>Category setup</Tags>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>EcoResProductCategoryStaging</DataManagementStagingTable>
	<IsPublic>Yes</IsPublic>
	<Modules>ProductInformationManagement</Modules>
	<PrimaryKey>EntityKey</PrimaryKey>
	<PublicCollectionName>ProductCategories</PublicCollectionName>
	<PublicEntityName>ProductCategory</PublicEntityName>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProductCategoryHierarchyName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ParentProductCategoryName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ParentProductCategoryCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CategoryName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CategoryCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FriendlyCategoryName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CategoryDescription</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsTangibleProduct</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CategoryKeywords</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsCategoryInheritingParentCategoryAttributes</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsCategoryInheritingParentProductAttributes</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PKWiUCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjectCategoryName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProductCategoryHierarchyName</Name>
			<Label>@SCM:ProductCategoryHierarchyName</Label>
			<DataField>Name</DataField>
			<DataSource>EcoResCategoryHierarchy</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ParentProductCategoryCode</Name>
			<Label>@SCM:ParentProductCategoryCode</Label>
			<DataField>Code</DataField>
			<DataSource>ParentEcoResCategory</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ParentProductCategoryName</Name>
			<Label>@SCM:ParentProductCategoryName</Label>
			<Mandatory>No</Mandatory>
			<DataField>Name</DataField>
			<DataSource>ParentEcoResCategory</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CategoryCode</Name>
			<Label>@SCM:ProductCategoryCode</Label>
			<DataField>Code</DataField>
			<DataSource>EcoResCategory</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CategoryName</Name>
			<Label>@SCM:ProductCategoryName</Label>
			<DataField>Name</DataField>
			<DataSource>EcoResCategory</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>FriendlyCategoryName</Name>
			<DataField>FriendlyName</DataField>
			<DataSource>EcoResCategoryTranslation</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CategoryDescription</Name>
			<DataField>Description</DataField>
			<DataSource>EcoResCategoryTranslation</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>IsTangibleProduct</Name>
			<DataField>IsTangible</DataField>
			<DataSource>EcoResCategory</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CategoryKeywords</Name>
			<DataField>SearchText</DataField>
			<DataSource>EcoResCategoryTranslation</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>IsCategoryInheritingParentCategoryAttributes</Name>
			<DataField>IsCategoryAttributesInherited</DataField>
			<DataSource>EcoResCategory</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>IsCategoryInheritingParentProductAttributes</Name>
			<DataField>IsProductAttributesInherited</DataField>
			<DataSource>ProcCategoryModifier</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PKWiUCode</Name>
			<CountryRegionCodes>PL</CountryRegionCodes>
			<Mandatory>No</Mandatory>
			<DataField>PKWiUCode</DataField>
			<DataSource>EcoResCategory</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProjectCategoryName</Name>
			<Label>@Proj:ProjectCategoryName</Label>
			<DataField>CategoryName</DataField>
			<DataSource>SharedCategory</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>DefaultProjectGlobalCategoryId</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<ExtendedDataType>SharedCategoryId</ExtendedDataType>
			<IsComputedField>No</IsComputedField>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CategoryRecordId</Name>
			<Label>@SCM:Field_EcoResProductCategoryEntity_CategoryRecordId</Label>
			<Mandatory>No</Mandatory>
			<DataField>RecId</DataField>
			<DataSource>EcoResCategory</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>ParentProductCategoryHierarchyName</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<Label>@SCM:Field_EcoResProductCategoryEntity_ParentProductCategoryHierarchyName</Label>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>parentProductCategoryHierarchyNameDefinition</ComputedFieldMethod>
			<ExtendedDataType>EcoResCategoryHierarchyName</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ExternalId</Name>
			<DataField>ExternalId</DataField>
			<DataSource>EcoResCategory</DataSource>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>ProductCategoryHierarchyName</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>CategoryName</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations>
		<AxDataEntityViewRelation xmlns=""
			i:type="AxDataEntityViewRelationForeignKey">
			<Name>ProductCategoryHierarchy</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedDataEntity>EcoResProductCategoryHierarchyEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ExactlyOne</RelatedDataEntityCardinality>
			<RelatedDataEntityRole>ProductCategoryHierarchy</RelatedDataEntityRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>ProductCategories</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>EcoResProductCategoryHierarchyEntity_HierarchyName</Name>
					<Field>ProductCategoryHierarchyName</Field>
					<RelatedField>HierarchyName</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
			<Key>EntityKey</Key>
		</AxDataEntityViewRelation>
		<AxDataEntityViewRelation xmlns=""
			i:type="AxDataEntityViewRelationForeignKey">
			<Name>ParentProductCategory</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedDataEntity>EcoResProductCategoryEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ZeroOne</RelatedDataEntityCardinality>
			<RelatedDataEntityRole>ParentProductCategory</RelatedDataEntityRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ChildProductCategories</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>EcoResProductCategoryEntity_ProductCategoryHierarchyName</Name>
					<Field>ProductCategoryHierarchyName</Field>
					<RelatedField>ProductCategoryHierarchyName</RelatedField>
				</AxDataEntityViewRelationConstraint>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>EcoResProductCategoryEntity_CategoryName</Name>
					<Field>ParentProductCategoryName</Field>
					<RelatedField>CategoryName</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
			<Key>EntityKey</Key>
		</AxDataEntityViewRelation>
	</Relations>
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>EcoResCategory</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>EcoResCategory</Table>
				<DataSources>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>EcoResCategoryHierarchy</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>EcoResCategoryHierarchy</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges>
							<AxQuerySimpleDataSourceRange>
								<Name>HierarchyModifier</Name>
								<Field>HierarchyModifier</Field>
								<Status>Hidden</Status>
								<Value>Category</Value>
							</AxQuerySimpleDataSourceRange>
						</Ranges>
						<UseRelations>Yes</UseRelations>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>BelongsTo</Name>
								<JoinRelationName>BelongsTo</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>ParentEcoResCategory</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>EcoResCategory</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>ParentCategory</Field>
								<JoinDataSource>EcoResCategory</JoinDataSource>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>EcoResCategorySystemLanguage</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>EcoResCategorySystemLanguage</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>RecId</Field>
								<JoinDataSource>EcoResCategory</JoinDataSource>
								<RelatedField>Category</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>EcoResCategoryTranslation</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>EcoResCategoryTranslation</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>RecId</Field>
								<JoinDataSource>EcoResCategory</JoinDataSource>
								<RelatedField>Category</RelatedField>
							</AxQuerySimpleDataSourceRelation>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation2</Name>
								<Field>SystemLanguageId</Field>
								<JoinDataSource>EcoResCategorySystemLanguage</JoinDataSource>
								<RelatedField>LanguageId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>ProcCategoryModifier</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>ProcCategoryModifier</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<JoinDataSource>EcoResCategory</JoinDataSource>
								<JoinRelationName>EcoResCategory</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>SharedCategory</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>SharedCategory</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>DefaultProjectGlobalCategory</Field>
								<JoinDataSource>EcoResCategory</JoinDataSource>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
				</DataSources>
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>