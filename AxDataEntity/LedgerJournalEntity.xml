<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class LedgerJournalEntity extends common
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>mapEntityToDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Maps the entity to the backing datasources.
    /// </summary>
    /// <param name = "entityCtx">The context of the entity.</param>
    /// <param name = "dataSourceCtx">The context of the datasource being mapped.</param>
    public void mapEntityToDataSource(DataEntityRuntimeContext entityCtx, DataEntityDataSourceRuntimeContext dataSourceCtx)
    {
        if (entityCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Insert
            || entityCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Update)
        {
            // When editing through the entity, always delay tax calculation to avoid
            // a O(n^2) tax calculation while importing multiple lines. The journal will
            // automatically calculate taxes later at posting time or when necessary.
            this.DelayTaxCalculation = NoYes::Yes;

            switch (dataSourceCtx.name())
            {
                case dataEntityDataSourceStr(LedgerJournalEntity, LedgerJournalTable):
                    dataSourceCtx.setBuffer(LedgerJournalEntityBase::findOrCreateLedgerJournalHeader(this));

                    break;
            }

            super(entityCtx, dataSourceCtx);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyCustomStagingToTarget</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs a custom copy from the staging table to the target environment.
    /// </summary>
    /// <param name = "_dmfDefinitionGroupExecution">The definition group.</param>
    /// <returns>A container of counts of [new records, updated records].</returns>
    /// <remarks>
    /// When doing set-based inserts, the full defaulting logic from LedgerJournalTrans is not
    /// run. In order to get full defaulting, row-by-row processing must be performed. Since
    /// this method is called specifically from the DIXF framework, the entity in
    /// DIXF can be marked as AllowSetBased=False in order to force row-by-row defaulting
    /// and validation. The trade off is a significant degradation in copy performance.
    /// </remarks>
    public static container copyCustomStagingToTarget(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution)
    {
        #ISOCountryRegionCodes
        boolean delayTaxCalculation = LedgerJournalEntity::getDelayTaxCalculation();

        // clear out any validation errors from previous runs.
        DMFStagingValidationLog log;
        log.skipDataMethods(true);

        delete_from log
            where log.DefinitionGroupName == _dmfDefinitionGroupExecution.DefinitionGroup
               && log.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId;

        LedgerJournalEntityStaging staging;

        // Set all Validated records back to NotStarted so they will be attempted again.
        update_recordset staging setting TransferStatus = DMFTransferStatus::NotStarted
            where staging.TransferStatus == DMFTransferStatus::Validated
                && staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId;

        // If a Ledger account type is provided, ignore any default dimension value that was provided as we require
        // the dimensions to be on the ledger account
        update_recordset staging setting DefaultDimensionDisplayValue = ''
            where staging.AccountType == LedgerJournalACType::Ledger
                && staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                && staging.TransferStatus == DMFTransferStatus::NotStarted;

        update_recordset staging setting OffsetDefaultDimensionDisplayValue = ''
            where staging.OffsetAccountType == LedgerJournalACType::Ledger
                && staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                && staging.TransferStatus == DMFTransferStatus::NotStarted;

        // resolve accounts and log errors.
        DimensionDataEntitySFKCacheTmp dimCacheTmp = LedgerDimensionDynamicAccountSetBasedResolver::Resolve(
                _dmfDefinitionGroupExecution,
                staging,
                fieldStr(LedgerJournalEntityStaging, AccountDisplayValue),
                fieldStr(LedgerJournalEntityStaging, OffsetAccountDisplayValue),
                tableStr(LedgerJournalEntityStaging),
                _dmfDefinitionGroupExecution.Entity);

        DimensionDataEntitySFKCacheTmp dimCacheTmpRef;
        dimCacheTmpRef.linkPhysicalTableInstance(dimCacheTmp);

        DimensionDataEntitySFKCacheTmp defaultDimCacheTmp = DimensionDefaultSetBasedResolver::Resolve(_dmfDefinitionGroupExecution, staging, true);
        DimensionDataEntitySFKCacheTmp defaultDimCacheTmpRef;
        defaultDimCacheTmpRef.linkPhysicalTableInstance(defaultDimCacheTmp);

        FinTagLedgerJournalEntityContract finTagContract = FinTagLedgerJournalEntityContract::construct(_dmfDefinitionGroupExecution, staging);
        FinTagSetBasedResolver::resolve(finTagContract);

        ttsbegin;

        LedgerJournalEntity::updateStagingForUnresolvedAccounts(_dmfDefinitionGroupExecution, dimCacheTmp, defaultDimCacheTmp);
        LedgerJournalEntity::updateStagingForReverseEntries(_dmfDefinitionGroupExecution);

        LedgerJournalEntity::updateStaging(_dmfDefinitionGroupExecution);

        LedgerJournalEntity::validateJournalName(_dmfDefinitionGroupExecution, log);
        LedgerJournalEntity::validateJournalType(_dmfDefinitionGroupExecution, log);

        if (FeatureStateProvider::isFeatureEnabled(LedgerJournalEntityHeaderValidationFlight::instance()))
        {
            LedgerJournalEntity::validateJournalHeaderForDuplicateValues(_dmfDefinitionGroupExecution, log);
        }

        LedgerJournalEntity::validateAndUpdateExchangeRates(_dmfDefinitionGroupExecution, log);
        LedgerJournalEntity::validateAccountTypes(_dmfDefinitionGroupExecution, log);
        LedgerJournalEntity::validateAccountBlockedForManualEntry(_dmfDefinitionGroupExecution, log, dimCacheTmp);
        LedgerJournalEntity::validateAccounts(_dmfDefinitionGroupExecution, log);
        LedgerJournalEntity::ValidateCreditDebitAmounts(_dmfDefinitionGroupExecution, log);
        LedgerJournalEntity::validateEntityUpdateForWorkflow(_dmfDefinitionGroupExecution, log);
        LedgerJournalEntity::validateJournalUnposted(_dmfDefinitionGroupExecution, log);

        if (!FeatureStateProvider::isFeatureEnabled(LedgerJournalSystemBlockedFeatureReverseFlight::instance()))
        {
            LedgerJournalEntity::validateJournalIsNotSystemBlocked(_dmfDefinitionGroupExecution, log);
        }

        LedgerJournalEntity::validateIsJournalDocumentEditable(_dmfDefinitionGroupExecution, log);

        // Now that all invalid rows are in an error state, any remaining NotStarted
        // rows should successfully transfer to the target tables.
        //
        // Since an insert_recordset call to the LedgerJournalEntity will automatically degrade
        // to row-by-row operations, the insert to the header and line tables must be done
        // individually with data methods skipped.
        LedgerJournalEntity::createJournalHeaders(_dmfDefinitionGroupExecution);

        // Get the number of records updated.
        int64 updatedRecords = LedgerJournalEntity::updateExistingJournalLines(_dmfDefinitionGroupExecution, dimCacheTmp, dimCacheTmpRef, defaultDimCacheTmp, defaultDimCacheTmpRef, delayTaxCalculation);

        // Get the number of records inserted.
        int64 newRecords = LedgerJournalEntity::createJournalLines(_dmfDefinitionGroupExecution, dimCacheTmp, dimCacheTmpRef, defaultDimCacheTmp, defaultDimCacheTmpRef, delayTaxCalculation);

        LedgerJournalEntity::updateLedgerJournalTransSettleVoucher(_dmfDefinitionGroupExecution);

        // <GIN>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            LedgerJournalEntity::updateLedgerJournalTransTaxExtensionIN(_dmfDefinitionGroupExecution, dimCacheTmp, dimCacheTmpRef, defaultDimCacheTmp, defaultDimCacheTmpRef);
            LedgerJournalEntity::createLedgerJournalTransTaxExtensionIN(_dmfDefinitionGroupExecution, dimCacheTmp, dimCacheTmpRef, defaultDimCacheTmp, defaultDimCacheTmpRef);

            LedgerJournalEntity::markTaxDocumentDirty(_dmfDefinitionGroupExecution);
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoTH]))
        {
            LedgerJournalEntity::updateLedgerJournalTransExtensionTH(_dmfDefinitionGroupExecution);
            LedgerJournalEntity::createLedgerJournalTransExtensionTH(_dmfDefinitionGroupExecution);
        }
        
        // </GIN>

        if (Tax::isTaxIntegrationEnabledForBusinessProcess(TaxIntegrationBusinessProcess::Journal))
        {
            LedgerJournalEntity::updateLedgerJournalTransTaxExtension(_dmfDefinitionGroupExecution);
            LedgerJournalEntity::createLedgerJournalTransTaxExtension(_dmfDefinitionGroupExecution);
        }

        // <GCN>
        if (LedgerParameters::isChineseVoucher_CN())
        {
            LedgerJournalTrans ledgerJournalTrans;
            LedgerVoucherType_CN voucherType_CN;
            ledgerJournalTrans.skipDataMethods(true);

            if (LedgerJournalEntityAdditionalSkipEventsFlight::instance().isEnabled())
            {
                ledgerJournalTrans.skipEvents(true);
                ledgerJournalTrans.skipDatabaseLog(true);
            }

            update_recordset ledgerJournalTrans
                setting LedgerVoucherType_CN = voucherType_CN.RecId
            join staging
                    where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                    && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                    && staging.TransferStatus == DMFTransferStatus::NotStarted
                    && staging.JournalBatchNumber == ledgerJournalTrans.JournalNum
                    && staging.LineNumber == ledgerJournalTrans.LineNum
            join voucherType_CN
                where staging.ChineseVoucherType == voucherType_CN.Id;
        }
        // </GCN>

        LedgerJournalEntity::updateFinTags(finTagContract);

        LedgerJournalEntity::updateStagingTransferStatusToCompleted(_dmfDefinitionGroupExecution);

        ttscommit;

        return [newRecords, updatedRecords];
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateStagingForUnresolvedAccounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the transfer status of staging records to error for unresolved accounts.
    /// </summary>
    /// <param name = "_dmfDefinitionGroupExecution">
    /// The definition group.
    /// </param>
    /// <param name = "_dimCacheTmp">
    /// The <c>DimensionDataEntitySFKCacheTmp</c> instance which contains resolved dynamic dimensions.
    /// </param>
    /// <param name = "_defaultDimCacheTmp">
    /// The <c>DimensionDataEntitySFKCacheTmp</c> instance which contains resolved default dimensions.
    /// </param>
    protected static void updateStagingForUnresolvedAccounts(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution,
        DimensionDataEntitySFKCacheTmp _dimCacheTmp,
        DimensionDataEntitySFKCacheTmp _defaultDimCacheTmp)
    {
        LedgerJournalEntityStaging staging;
        const DimensionHierarchyType hierarchyType = DimensionHierarchyType::DataEntityLedgerDimensionFormat;
        ExtendedDataTypeName dataType = identifierstr(DimensionDynamicAccount);

        // Put any rows that have unresolved accounts in an error state first.
        update_recordset staging
            setting TransferStatus = DMFTransferStatus::Error
            where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
               && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
               && staging.TransferStatus == DMFTransferStatus::NotStarted
            exists join _dimCacheTmp
                where _dimCacheTmp.IntegrationString == staging.AccountDisplayValue
                   && _dimCacheTmp.EnumValue == staging.AccountType
                   && _dimCacheTmp.HierarchyType == hierarchyType
                   && _dimCacheTmp.ExtendedDataType == dataType
                   && _dimCacheTmp.Found == NoYes::No;

        // Offset accounts.
        update_recordset staging
            setting TransferStatus = DMFTransferStatus::Error
            where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
               && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
               && staging.TransferStatus == DMFTransferStatus::NotStarted
            exists join _dimCacheTmp
                where _dimCacheTmp.IntegrationString == staging.OffsetAccountDisplayValue
                   && _dimCacheTmp.EnumValue == staging.OffsetAccountType
                   && _dimCacheTmp.HierarchyType == hierarchyType
                   && _dimCacheTmp.ExtendedDataType == dataType
                   && _dimCacheTmp.Found == NoYes::No;

        // Default dimension

        ExtendedDataTypeName defaultDimensionDataType = extendedTypeStr(DimensionDefault);

        update_recordset staging
            setting TransferStatus = DMFTransferStatus::Error
            where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
               && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
               && staging.TransferStatus == DMFTransferStatus::NotStarted
            exists join _defaultDimCacheTmp
                where _defaultDimCacheTmp.IntegrationString == staging.DefaultDimensionDisplayValue
                   && _defaultDimCacheTmp.HierarchyType == DimensionHierarchyType::DataEntityDefaultDimensionFormat
                   && _defaultDimCacheTmp.ExtendedDataType == defaultDimensionDataType
                   && _defaultDimCacheTmp.Found == NoYes::No;

        // Offset default dimension
        update_recordset staging
            setting TransferStatus = DMFTransferStatus::Error
            where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
               && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
               && staging.TransferStatus == DMFTransferStatus::NotStarted
            exists join _defaultDimCacheTmp
                where _defaultDimCacheTmp.IntegrationString == staging.OffsetDefaultDimensionDisplayValue
                   && _defaultDimCacheTmp.HierarchyType == DimensionHierarchyType::DataEntityDefaultDimensionFormat
                   && _defaultDimCacheTmp.ExtendedDataType == defaultDimensionDataType
                   && _defaultDimCacheTmp.Found == NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateStagingTransferStatusToCompleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the transfer status of staging records to completed.
    /// </summary>
    /// <param name = "_dmfDefinitionGroupExecution">
    /// The definition group.
    /// </param>
    protected static void updateStagingTransferStatusToCompleted(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution)
    {
        LedgerJournalEntityStaging staging;

        // Update transferred records to success status.
        update_recordset staging
            setting TransferStatus = DMFTransferStatus::Completed
            where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                && staging.TransferStatus == DMFTransferStatus::NotStarted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalHeaders</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates journal headers.
    /// </summary>
    /// <param name = "_dmfDefinitionGroupExecution">
    /// The definition group.
    /// </param>
    /// <remarks>
    /// Using Chain of Command, an update_recordset can be used to set extension field values for
    /// new journal headers created by this method. Typically the return value would not need to be modified.
    /// Use this pattern to copy extension fields from the source LedgerJournalEntityStaging table
    /// to the target LedgerJournalTable table using an update_recordset statement.
    /// All update_recordset statements should contain the following where clause to restrict to
    /// the current session.
    /// update_recordset ledgerJounalTable
    ///     setting MyHeaderField = staging.MyHeaderField
    /// join staging
    ///     where staging.JournalBatchNumber == ledgerJournalTable.JournalNum
    ///         && staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
    ///         && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
    ///         && staging.TransferStatus == DMFTransferStatus::NotStarted
    /// </remarks>
    protected static void createJournalHeaders(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution)
    {
        // Insert the records for the journal names that have an approval workflow. Set the workflow approval status to NotSubmitted.
        LedgerJournalEntityCreateJournalHeaders::createJournalHeaders(_dmfDefinitionGroupExecution, LedgerJournalWFApprovalStatus::NotSubmitted, NoYes::Yes);
        // Insert the records for the journal names that don't have an approval workflow. Set the workflow approval status to None.
        LedgerJournalEntityCreateJournalHeaders::createJournalHeaders(_dmfDefinitionGroupExecution, LedgerJournalWFApprovalStatus::None, NoYes::No);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateExistingJournalLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates existing journal lines with any changes from staging.
    /// </summary>
    /// <param name = "_dmfDefinitionGroupExecution">
    /// The definition group.
    /// </param>
    /// <param name = "_dimCacheTmp">
    /// The <c>DimensionDataEntitySFKCacheTmp</c> instance which contains resolved dynamic dimensions.
    /// </param>
    /// <param name = "_dimCacheTmpRef">
    /// The <c>DimensionDataEntitySFKCacheTmp</c> instance which contains resolved dynamic dimensions.
    /// </param>
    /// <param name = "_defaultDimCacheTmp">
    /// The <c>DimensionDataEntitySFKCacheTmp</c> instance which contains resolved default dimensions.
    /// </param>
    /// <param name = "_defaultDimCacheTmpRef">
    /// The <c>DimensionDataEntitySFKCacheTmp</c> instance which contains resolved default dimensions.
    /// </param>
    /// <param name = "_delayTaxCalculation">
    /// Determines whether to delay tax calculation.
    /// </param>
    /// <returns>
    /// The number of journal lines updated.
    /// </returns>
    protected static int64 updateExistingJournalLines(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution,
        DimensionDataEntitySFKCacheTmp _dimCacheTmp,
        DimensionDataEntitySFKCacheTmp _dimCacheTmpRef,
        DimensionDataEntitySFKCacheTmp _defaultDimCacheTmp,
        DimensionDataEntitySFKCacheTmp _defaultDimCacheTmpRef,
        boolean _delayTaxCalculation)
    {
        LedgerJournalTrans ledgerJournalTrans;
        ledgerJournalTrans.skipDataMethods(true);

        if (LedgerJournalEntityAdditionalSkipEventsFlight::instance().isEnabled())
        {
            ledgerJournalTrans.skipEvents(true);
            ledgerJournalTrans.skipDatabaseLog(true);
        }

        LedgerJournalTable ledgerJournalTable_Exists;
        LedgerJournalEntityStaging staging;
        // <GCN>
        LedgerVoucherType_CN voucherType_CN;
        // </GCN>

        ExtendedDataTypeName defaultDimensionDataType = extendedTypeStr(DimensionDefault);
        const DimensionHierarchyType hierarchyType = DimensionHierarchyType::DataEntityLedgerDimensionFormat;
        ExtendedDataTypeName dataType = identifierstr(DimensionDynamicAccount);

        update_recordset ledgerJournalTrans setting
                Txt = staging.Text,
                OffsetTxt = staging.OffsetText,
                Voucher = staging.Voucher,
                // <GCN>
                Voucher_CN = staging.ChineseVoucher,
                LedgerVoucherType_CN = voucherType_CN.RecId,
                // </GCN>
                TransDate = staging.TransDate,
                AmountCurCredit = staging.CreditAmount,
                AmountCurDebit = staging.DebitAmount,
                CurrencyCode = staging.CurrencyCode,
                ExchRate = staging.ExchangeRate,
                ExchrateSecond = staging.ExchangeRateSecondary,
                ReportingCurrencyExchRate = staging.ReportingCurrencyExchRate,
                ReportingCurrencyExchRateSecondary = staging.ReportingCurrencyExchRateSecondary,
                CashDiscAmount = staging.CashDiscountAmount,
                CashDiscPercent = staging.DiscountPercentage,
                AccountType = staging.AccountType,
                OffsetAccountType = staging.OffsetAccountType,
                Qty = staging.Quantity,
                TaxWithholdCalculate_TH = staging.IsWithholdingCalculationEnabled,
                Invoice = staging.Invoice,
                Due = staging.DueDate,
                PaymId = staging.PaymentId,
                VATNumJournal = staging.TaxExemptNumber,
                TaxCode = staging.SalesTaxCode,
                TaxItemGroup = staging.ItemSalesTaxGroup,
                CashDiscCode = staging.CashDiscount,
                DateCashDisc = staging.CashDiscountDate,
                DocumentNum = staging.Document,
                DocumentDate = staging.DocumentDate,
                PaymMode = staging.PaymentMethod,
                PostingProfile = staging.PostingProfile,
                TaxGroup = staging.SalesTaxGroup,
                PaymReference = staging.PaymentReference,
                DelayTaxCalculation = _delayTaxCalculation,
                ReverseDate = staging.ReverseDate,
                ReverseEntry = staging.ReverseEntry,
                LedgerDimension = _dimCacheTmp.ResolvedReference,
                OffsetLedgerDimension = _dimCacheTmpRef.ResolvedReference,
                DefaultDimension = _defaultDimCacheTmp.ResolvedReference,
                OffsetDefaultDimension = _defaultDimCacheTmpRef.ResolvedReference,
                AcknowledgementDate = staging.AcknowledgementDate,
                Prepayment = staging.Prepayment
            join staging
                where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                    && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                    && staging.TransferStatus == DMFTransferStatus::NotStarted
                    && staging.JournalBatchNumber == ledgerJournalTrans.JournalNum
                    && staging.LineNumber == ledgerJournalTrans.LineNum
            join ResolvedReference from _dimCacheTmp
                where _dimCacheTmp.IntegrationString == staging.AccountDisplayValue
                    && _dimCacheTmp.EnumValue == staging.AccountType
                    && _dimCacheTmp.HierarchyType == hierarchyType
                    && _dimCacheTmp.ExtendedDataType == dataType
            join ResolvedReference from _dimCacheTmpRef
                where _dimCacheTmpRef.IntegrationString == staging.OffsetAccountDisplayValue
                    && _dimCacheTmpRef.EnumValue == staging.OffsetAccountType
                    && _dimCacheTmpRef.HierarchyType == hierarchyType
                    && _dimCacheTmpRef.ExtendedDataType == dataType
            join ResolvedReference from _defaultDimCacheTmp
                where _defaultDimCacheTmp.IntegrationString == staging.DefaultDimensionDisplayValue
                    && _defaultDimCacheTmp.HierarchyType == DimensionHierarchyType::DataEntityDefaultDimensionFormat
                    && _defaultDimCacheTmp.ExtendedDataType == defaultDimensionDataType
            join ResolvedReference from _defaultDimCacheTmpRef
                where _defaultDimCacheTmpRef.IntegrationString == staging.OffsetDefaultDimensionDisplayValue
                    && _defaultDimCacheTmpRef.HierarchyType == DimensionHierarchyType::DataEntityDefaultDimensionFormat
                    && _defaultDimCacheTmpRef.ExtendedDataType == defaultDimensionDataType
            // <GCN>
            outer join RecId from voucherType_CN
                where voucherType_CN.Id == staging.ChineseVoucherType
            // </GCN>
            notexists join ledgerJournalTable_Exists
                where ledgerJournalTable_Exists.JournalNum == ledgerJournalTrans.JournalNum
                    && ledgerJournalTable_Exists.Posted == NoYes::Yes;

        LedgerJournalEntity::deleteTaxUncommitted(_dmfDefinitionGroupExecution);

        return ledgerJournalTrans.RowCount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteTaxUncommitted</Name>
				<Source><![CDATA[
    private static void deleteTaxUncommitted(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution)
    {
        TaxUncommitted taxUncommitted;
        LedgerJournalTable ledgerJournalTable;
        LedgerJournalEntityStaging staging;

        while select ledgerJournalTable
            where ledgerJournalTable.Posted == NoYes::No
            exists join taxUncommitted
                where taxUncommitted.HeadingTableId == ledgerJournalTable.TableId
                    && taxUncommitted.HeadingRecId == ledgerJournalTable.RecId
            exists join staging
                where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                    && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                    && staging.TransferStatus == DMFTransferStatus::NotStarted
                    && staging.JournalBatchNumber == ledgerJournalTable.JournalNum
        {
            TaxUncommitted::deleteForDocumentHeader(ledgerJournalTable.TableId, ledgerJournalTable.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLedgerJournalTransTaxExtensionIN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates <c>LedgerJournalTransTaxExtensionIN</c> with any changes from staging.
    /// </summary>
    /// <param name = "_dmfDefinitionGroupExecution">
    /// The definition group.
    /// </param>
    /// <param name = "_dimCacheTmp">
    /// The <c>DimensionDataEntitySFKCacheTmp</c> instance which contains resolved dynamic dimensions.
    /// </param>
    /// <param name = "_dimCacheTmpRef">
    /// The <c>DimensionDataEntitySFKCacheTmp</c> instance which contains resolved dynamic dimensions.
    /// </param>
    /// <param name = "_defaultDimCacheTmp">
    /// The <c>DimensionDataEntitySFKCacheTmp</c> instance which contains resolved default dimensions.
    /// </param>
    /// <param name = "_defaultDimCacheTmpRef">
    /// The <c>DimensionDataEntitySFKCacheTmp</c> instance which contains resolved default dimensions.
    /// </param>
    protected static void updateLedgerJournalTransTaxExtensionIN(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution,
        DimensionDataEntitySFKCacheTmp _dimCacheTmp,
        DimensionDataEntitySFKCacheTmp _dimCacheTmpRef,
        DimensionDataEntitySFKCacheTmp _defaultDimCacheTmp,
        DimensionDataEntitySFKCacheTmp _defaultDimCacheTmpRef)
    {
        LedgerJournalTransTaxExtensionIN ledgerJournalTransTaxExtensionIN;
        LedgerJournalTrans ledgerJournalTrans;
        LedgerJournalTable ledgerJournalTable_Exists;
        LedgerJournalEntityStaging staging;

        ExtendedDataTypeName defaultDimensionDataType = extendedTypeStr(DimensionDefault);
        const DimensionHierarchyType hierarchyType = DimensionHierarchyType::DataEntityLedgerDimensionFormat;
        ExtendedDataTypeName dataType = identifierstr(DimensionDynamicAccount);

        ledgerJournalTransTaxExtensionIN.skipDataMethods(true);

        update_recordset ledgerJournalTransTaxExtensionIN setting
                InvoiceIdentification = staging.InvoiceIdentification,
                ProvisionalAssessment = staging.ProvisionalAssessment,
                AssessableValueTransactionCurrency = staging.AssessableValueTransactionCurrency,
                MaximumRetailPrice = staging.MaximumRetailPrice,
                TaxWithholdCode = staging.TaxWithholdCode,
                TCSGroup = staging.TCSGroup,
                TDSGroup = staging.TDSGroup
            join ledgerJournalTrans
                where ledgerJournalTrans.RecId == ledgerJournalTransTaxExtensionIN.LedgerJournalTrans
            join staging
                where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                    && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                    && staging.TransferStatus == DMFTransferStatus::NotStarted
                    && staging.JournalBatchNumber == ledgerJournalTrans.JournalNum
                    && staging.LineNumber == ledgerJournalTrans.LineNum
            join _dimCacheTmp
                where _dimCacheTmp.IntegrationString == staging.AccountDisplayValue
                    && _dimCacheTmp.EnumValue == staging.AccountType
                    && _dimCacheTmp.HierarchyType == hierarchyType
                    && _dimCacheTmp.ExtendedDataType == dataType
            join _dimCacheTmpRef
                where _dimCacheTmpRef.IntegrationString == staging.OffsetAccountDisplayValue
                    && _dimCacheTmpRef.EnumValue == staging.OffsetAccountType
                    && _dimCacheTmpRef.HierarchyType == hierarchyType
                    && _dimCacheTmpRef.ExtendedDataType == dataType
            join _defaultDimCacheTmp
                where _defaultDimCacheTmp.IntegrationString == staging.DefaultDimensionDisplayValue
                    && _defaultDimCacheTmp.HierarchyType == DimensionHierarchyType::DataEntityDefaultDimensionFormat
                    && _defaultDimCacheTmp.ExtendedDataType == defaultDimensionDataType
            join _defaultDimCacheTmpRef
                where _defaultDimCacheTmpRef.IntegrationString == staging.OffsetDefaultDimensionDisplayValue
                    && _defaultDimCacheTmpRef.HierarchyType == DimensionHierarchyType::DataEntityDefaultDimensionFormat
                    && _defaultDimCacheTmpRef.ExtendedDataType == defaultDimensionDataType
            notexists join ledgerJournalTable_Exists
                where ledgerJournalTable_Exists.JournalNum == ledgerJournalTrans.JournalNum
                    && ledgerJournalTable_Exists.Posted == NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLedgerJournalTransExtensionTH</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates <c>LedgerJournalTransTaxExtensionIN</c> with any changes from staging.
    /// </summary>
    /// <param name = "_dmfDefinitionGroupExecution">
    /// The definition group.
    /// </param>
    /// <param name = "_dimCacheTmp">
    /// The <c>DimensionDataEntitySFKCacheTmp</c> instance which contains resolved dynamic dimensions.
    /// </param>
    /// <param name = "_dimCacheTmpRef">
    /// The <c>DimensionDataEntitySFKCacheTmp</c> instance which contains resolved dynamic dimensions.
    /// </param>
    /// <param name = "_defaultDimCacheTmp">
    /// The <c>DimensionDataEntitySFKCacheTmp</c> instance which contains resolved default dimensions.
    /// </param>
    /// <param name = "_defaultDimCacheTmpRef">
    /// The <c>DimensionDataEntitySFKCacheTmp</c> instance which contains resolved default dimensions.
    /// </param>
    protected static void updateLedgerJournalTransExtensionTH(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution)
    {
        LedgerJournalTransExtensionTH ledgerJournalTransExtensionTH;
        LedgerJournalTrans ledgerJournalTrans;
        LedgerJournalTable ledgerJournalTable_Exists;
        LedgerJournalEntityStaging staging;

        ExtendedDataTypeName defaultDimensionDataType = extendedTypeStr(DimensionDefault);
        const DimensionHierarchyType hierarchyType = DimensionHierarchyType::DataEntityLedgerDimensionFormat;
        ExtendedDataTypeName dataType = identifierstr(DimensionDynamicAccount);
        
		update_recordset ledgerJournalTransExtensionTH setting
            InvoiceDate = staging.InvoiceDate,
            InvoiceReceiptDate = staging.InvoiceReceiptDate,
            TaxInvoiceReceiptDate = staging.TaxInvoiceReceiptDate
            join ledgerJournalTrans
                where ledgerJournalTrans.RecId == ledgerJournalTransExtensionTH.LedgerJournalTrans
            join staging
                where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                    && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                    && staging.TransferStatus == DMFTransferStatus::NotStarted
                    && staging.JournalBatchNumber == ledgerJournalTrans.JournalNum
                    && staging.LineNumber == ledgerJournalTrans.LineNum
            notexists join ledgerJournalTable_Exists
                where ledgerJournalTable_Exists.JournalNum == ledgerJournalTrans.JournalNum
                    && ledgerJournalTable_Exists.Posted == NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLedgerJournalTransTaxExtension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates <c>LedgerJournalTransTaxExtension</c> with any changes from staging.
    /// </summary>
    /// <param name = "_dmfDefinitionGroupExecution">
    /// The definition group.
    /// </param>
    protected static void updateLedgerJournalTransTaxExtension(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution)
    {
        LedgerJournalTransTaxExtension ledgerJournalTransTaxExtension;
        LedgerJournalTrans ledgerJournalTrans;
        LedgerJournalTable ledgerJournalTable_Exists;
        LedgerJournalEntityStaging staging;

        ledgerJournalTransTaxExtension.skipDataMethods(true);

        update_recordset ledgerJournalTransTaxExtension setting
            OverrideSalesTax = staging.OverrideSalesTax
            join ledgerJournalTrans
                where ledgerJournalTrans.RecId == ledgerJournalTransTaxExtension.LedgerJournalTrans
            join staging
                where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                    && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                    && staging.TransferStatus == DMFTransferStatus::NotStarted
                    && staging.JournalBatchNumber == ledgerJournalTrans.JournalNum
                    && staging.LineNumber == ledgerJournalTrans.LineNum
            notexists join ledgerJournalTable_Exists
                where ledgerJournalTable_Exists.JournalNum == ledgerJournalTrans.JournalNum
                    && ledgerJournalTable_Exists.Posted == NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateStagingForReverseEntries</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the voucher reverse entry values if a reverse date and reverse entry value have
    /// been specified on a voucher line.
    /// </summary>
    /// <param name = "_dmfDefinitionGroupExecution">The definition group.</param>
    protected static void updateStagingForReverseEntries(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution)
    {
        LedgerJournalEntityStaging staging, stagingUpdate;

        while select JournalBatchNumber, Voucher, ReverseDate, ReverseEntry
            from staging
            group by JournalBatchNumber, Voucher, ReverseDate, ReverseEntry
            where staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                && staging.TransferStatus == DMFTransferStatus::NotStarted
                && staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                && (staging.ReverseDate != dateNull() || staging.ReverseEntry)
        {
            update_recordset stagingUpdate setting
                ReverseDate = staging.ReverseDate,
                ReverseEntry = staging.ReverseEntry
            where stagingUpdate.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                && stagingUpdate.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                && stagingUpdate.TransferStatus == DMFTransferStatus::NotStarted
                && stagingUpdate.JournalBatchNumber == staging.JournalBatchNumber
                && stagingUpdate.Voucher == staging.Voucher;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates new journal lines from the staging table.
    /// </summary>
    /// <param name = "_dmfDefinitionGroupExecution">
    /// The definition group.
    /// </param>
    /// <param name = "_dimCacheTmp">
    /// The <c>DimensionDataEntitySFKCacheTmp</c> instance which contains resolved dynamic dimensions.
    /// </param>
    /// <param name = "_dimCacheTmpRef">
    /// The <c>DimensionDataEntitySFKCacheTmp</c> instance which contains resolved dynamic dimensions.
    /// </param>
    /// <param name = "_defaultDimCacheTmp">
    /// The <c>DimensionDataEntitySFKCacheTmp</c> instance which contains resolved default dimensions.
    /// </param>
    /// <param name = "_defaultDimCacheTmpRef">
    /// The <c>DimensionDataEntitySFKCacheTmp</c> instance which contains resolved default dimensions.
    /// </param>
    /// <param name = "_delayTaxCalculation">
    /// Determines whether to delay tax calculation.
    /// </param>
    /// <returns>
    /// The number of journal lines created.
    /// </returns>
    /// <remarks>
    /// Using Chain of Command, an update_recordset can be used to set extension field values for
    /// new journal lines created by this method. Typically the return value would not need to be modified.
    /// Use this pattern to copy extension fields from the source LedgerJournalEntityStaging table
    /// to the target LedgerJournalTrans table using an update_recordset statement.
    /// All update_recordset statements should contain the following where clause to restrict to
    /// the current session.
    /// update_recordset ledgerJounalTrans
    ///     setting MyLineField = staging.MyLineField
    /// join staging
    ///     where staging.JournalBatchNumber == ledgerJournalTrans.JournalNum
    ///         && staging.LineNumber == ledgerJournalTrans.LineNum
    ///         && staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
    ///         && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
    ///         && staging.TransferStatus == DMFTransferStatus::NotStarted
    /// </remarks>
    protected static int64 createJournalLines(
        DMFDefinitionGroupExecution _dmfDefinitionGroupExecution,
        DimensionDataEntitySFKCacheTmp _dimCacheTmp,
        DimensionDataEntitySFKCacheTmp _dimCacheTmpRef,
        DimensionDataEntitySFKCacheTmp _defaultDimCacheTmp,
        DimensionDataEntitySFKCacheTmp _defaultDimCacheTmpRef,
        boolean _delayTaxCalculation)
    {
        LedgerJournalTrans ledgerJournalTrans = LedgerJournalEntityCreateJournalLines::createJournalLines(
            _dmfDefinitionGroupExecution,
            _dimCacheTmp,
            _dimCacheTmpRef,
            _defaultDimCacheTmp,
            _defaultDimCacheTmpRef,
            _delayTaxCalculation);

        return ledgerJournalTrans.RowCount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLedgerJournalTransTaxExtensionIN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates <c>LedgerJournalTransTaxExtensionIN</c> lines from the staging table.
    /// </summary>
    /// <param name = "_dmfDefinitionGroupExecution">
    /// The definition group.
    /// </param>
    /// <param name = "_dimCacheTmp">
    /// The <c>DimensionDataEntitySFKCacheTmp</c> instance which contains resolved dynamic dimensions.
    /// </param>
    /// <param name = "_dimCacheTmpRef">
    /// The <c>DimensionDataEntitySFKCacheTmp</c> instance which contains resolved dynamic dimensions.
    /// </param>
    /// <param name = "_defaultDimCacheTmp">
    /// The <c>DimensionDataEntitySFKCacheTmp</c> instance which contains resolved default dimensions.
    /// </param>
    /// <param name = "_defaultDimCacheTmpRef">
    /// The <c>DimensionDataEntitySFKCacheTmp</c> instance which contains resolved default dimensions.
    /// </param>
    protected static void createLedgerJournalTransTaxExtensionIN(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution,
        DimensionDataEntitySFKCacheTmp _dimCacheTmp,
        DimensionDataEntitySFKCacheTmp _dimCacheTmpRef,
        DimensionDataEntitySFKCacheTmp _defaultDimCacheTmp,
        DimensionDataEntitySFKCacheTmp _defaultDimCacheTmpRef)
    {
        LedgerJournalTransTaxExtensionIN ledgerJournalTransTaxExtensionIN;
        LedgerJournalTransTaxExtensionIN ledgerJournalTransTaxExtensionIN_Exist;
        LedgerJournalTrans ledgerJournalTrans;
        LedgerJournalEntityStaging staging;

        ExtendedDataTypeName defaultDimensionDataType = extendedTypeStr(DimensionDefault);
        const DimensionHierarchyType hierarchyType = DimensionHierarchyType::DataEntityLedgerDimensionFormat;
        ExtendedDataTypeName dataType = identifierstr(DimensionDynamicAccount);

        ledgerJournalTransTaxExtensionIN.skipDataMethods(true);

        insert_recordset ledgerJournalTransTaxExtensionIN (
            InvoiceIdentification, ProvisionalAssessment, AssessableValueTransactionCurrency,
            MaximumRetailPrice, TaxWithholdCode, TCSGroup, TDSGroup, LedgerJournalTrans
            )
        select
            InvoiceIdentification, ProvisionalAssessment, AssessableValueTransactionCurrency, 
            MaximumRetailPrice, TaxWithholdCode, TCSGroup, TDSGroup
        from staging
            where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                && staging.TransferStatus == DMFTransferStatus::NotStarted
            join  _dimCacheTmp
                where _dimCacheTmp.IntegrationString == staging.AccountDisplayValue
                    && _dimCacheTmp.EnumValue == staging.AccountType
                    && _dimCacheTmp.HierarchyType == hierarchyType
                    && _dimCacheTmp.ExtendedDataType == dataType
            join _dimCacheTmpRef
                where _dimCacheTmpRef.IntegrationString == staging.OffsetAccountDisplayValue
                    && _dimCacheTmpRef.EnumValue == staging.OffsetAccountType
                    && _dimCacheTmpRef.HierarchyType == hierarchyType
                    && _dimCacheTmpRef.ExtendedDataType == dataType
            join _defaultDimCacheTmp
                where _defaultDimCacheTmp.IntegrationString == staging.DefaultDimensionDisplayValue
                    && _defaultDimCacheTmp.HierarchyType == DimensionHierarchyType::DataEntityDefaultDimensionFormat
                    && _defaultDimCacheTmp.ExtendedDataType == defaultDimensionDataType
            join _defaultDimCacheTmpRef
                where _defaultDimCacheTmpRef.IntegrationString == staging.OffsetDefaultDimensionDisplayValue
                    && _defaultDimCacheTmpRef.HierarchyType == DimensionHierarchyType::DataEntityDefaultDimensionFormat
                    && _defaultDimCacheTmpRef.ExtendedDataType == defaultDimensionDataType
            join RecId from ledgerJournalTrans
                where ledgerJournalTrans.JournalNum == staging.JournalBatchNumber &&
                    ledgerJournalTrans.LineNum == staging.LineNumber
            notexists join ledgerJournalTransTaxExtensionIN_Exist
                where ledgerJournalTransTaxExtensionIN_Exist.LedgerJournalTrans == ledgerJournalTrans.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLedgerJournalTransExtensionTH</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates <c>LedgerJournalTransTaxExtensionIN</c> lines from the staging table.
    /// </summary>
    /// <param name = "_dmfDefinitionGroupExecution">
    /// The definition group.
    /// </param>
    /// <param name = "_dimCacheTmp">
    /// The <c>DimensionDataEntitySFKCacheTmp</c> instance which contains resolved dynamic dimensions.
    /// </param>
    /// <param name = "_dimCacheTmpRef">
    /// The <c>DimensionDataEntitySFKCacheTmp</c> instance which contains resolved dynamic dimensions.
    /// </param>
    /// <param name = "_defaultDimCacheTmp">
    /// The <c>DimensionDataEntitySFKCacheTmp</c> instance which contains resolved default dimensions.
    /// </param>
    /// <param name = "_defaultDimCacheTmpRef">
    /// The <c>DimensionDataEntitySFKCacheTmp</c> instance which contains resolved default dimensions.
    /// </param>
    protected static void createLedgerJournalTransExtensionTH(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution)
    {
        LedgerJournalTransExtensionTH ledgerJournalTransExtensionTH;
        LedgerJournalTransExtensionTH ledgerJournalTransExtensionTH_Exist;
        LedgerJournalTrans ledgerJournalTrans;
        LedgerJournalEntityStaging staging;

        ExtendedDataTypeName defaultDimensionDataType = extendedTypeStr(DimensionDefault);
        const DimensionHierarchyType hierarchyType = DimensionHierarchyType::DataEntityLedgerDimensionFormat;
        ExtendedDataTypeName dataType = identifierstr(DimensionDynamicAccount);;

        insert_recordset ledgerJournalTransExtensionTH (InvoiceDate, InvoiceReceiptDate, TaxInvoiceReceiptDate, LedgerJournalTrans)
        select InvoiceDate, InvoiceReceiptDate, TaxInvoiceReceiptDate
        from staging
            where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                && staging.TransferStatus == DMFTransferStatus::NotStarted
            join RecId from ledgerJournalTrans
                where ledgerJournalTrans.JournalNum == staging.JournalBatchNumber &&
                    ledgerJournalTrans.LineNum == staging.LineNumber
            notexists join ledgerJournalTransExtensionTH_Exist
                where ledgerJournalTransExtensionTH_Exist.LedgerJournalTrans == ledgerJournalTrans.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLedgerJournalTransTaxExtension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates <c>LedgerJournalTransTaxExtension</c> lines from the staging table.
    /// </summary>
    /// <param name = "_dmfDefinitionGroupExecution">
    /// The definition group.
    /// </param>
    protected static void createLedgerJournalTransTaxExtension(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution)
    {
        LedgerJournalTransTaxExtension ledgerJournalTransTaxExtension;
        LedgerJournalTransTaxExtension ledgerJournalTransTaxExtension_Exist;
        LedgerJournalTrans ledgerJournalTrans;
        LedgerJournalEntityStaging staging;

        ledgerJournalTransTaxExtension.skipDataMethods(true);

        insert_recordset ledgerJournalTransTaxExtension (OverrideSalesTax, LedgerJournalTrans)
            select OverrideSalesTax from staging
                where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                    && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                    && staging.TransferStatus == DMFTransferStatus::NotStarted
                join RecId from ledgerJournalTrans
                    where ledgerJournalTrans.JournalNum == staging.JournalBatchNumber
                        && ledgerJournalTrans.LineNum == staging.LineNumber
                notexists join ledgerJournalTransTaxExtension_Exist
                    where ledgerJournalTransTaxExtension_Exist.LedgerJournalTrans == ledgerJournalTrans.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAccountTypes</Name>
				<Source><![CDATA[
    private static void validateAccountTypes(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution, DMFStagingValidationLog _log)
    {
        // Only Ledger, customer, vendor, and bank account types are supported by this entity. All other records get set to error status.

        LedgerJournalEntityStaging staging;

        ErrorMsg error = "@GeneralLedger:EntityMessage_LedgerJournalEntityAccountTypeNotSupported";
        TableName tableName = tableStr(LedgerJournalEntityStaging);
        TableName entityName = LedgerJournalEntity::getEntityName(_dmfDefinitionGroupExecution.Entity);
        DMFSourceTarget sourceTarget = DMFSourceTarget::Target;
        FieldName fieldName = fieldStr(LedgerJournalEntityStaging, AccountType);

        insert_recordset _log (DefinitionGroupName, ExecutionId, StagingRecId, StagingTableName, StagingColumnName, SourceTarget, EntityName, ErrorMessage)
            select DefinitionGroup, ExecutionId, RecId, tableName, fieldName, sourceTarget, entityName, error from staging
                where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                    && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                    && staging.TransferStatus == DMFTransferStatus::NotStarted
                    && staging.AccountType != LedgerJournalACType::Ledger
                    && staging.AccountType != LedgerJournalACType::Bank
                    && staging.AccountType != LedgerJournalACType::Cust
                    && staging.AccountType != LedgerJournalACType::Vend;

        fieldName = fieldStr(LedgerJournalEntityStaging, OffsetAccountType);

        insert_recordset _log (DefinitionGroupName, ExecutionId, StagingRecId, StagingTableName, StagingColumnName, SourceTarget, EntityName, ErrorMessage)
            select DefinitionGroup, ExecutionId, RecId, tableName, fieldName, sourceTarget, entityName, error from staging
                where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                    && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                    && staging.TransferStatus == DMFTransferStatus::NotStarted
                    && staging.OffsetAccountType != LedgerJournalACType::Ledger
                    && staging.OffsetAccountType != LedgerJournalACType::Bank
                    && staging.OffsetAccountType != LedgerJournalACType::Cust
                    && staging.OffsetAccountType != LedgerJournalACType::Vend;

        update_recordset staging
            setting TransferStatus = DMFTransferStatus::Error
                where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                    && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                    && staging.TransferStatus == DMFTransferStatus::NotStarted
            exists join _log
                where _log.StagingRecId == staging.RecId
                    && _log.StagingTableName == tableName
                    && _log.ErrorMessage == error;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initEntityName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the entity name.
    /// </summary>
    /// <returns>
    /// The entity name.
    /// </returns>
    protected static TableName initEntityName()
    {
        TableName entityName = "@GeneralLedger:LedgerJournalEntityLabel";

        return entityName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEntityName</Name>
				<Source><![CDATA[
    private static TableName getEntityName(DMFEntityName _entityName = '')
    {
        TableName entityName;

        if (_entityName != '')
        {
            entityName = _entityName;
        }
        else
        {
            entityName = LedgerJournalEntity::initEntityName();
        }

        return entityName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAccounts</Name>
				<Source><![CDATA[
    private static void validateAccounts(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution, DMFStagingValidationLog _log)
    {
        LedgerJournalEntityStaging staging;

        ErrorMsg error = "@SYS25989";
        TableName tableName = tableStr(LedgerJournalEntityStaging);
        TableName entityName = LedgerJournalEntity::getEntityName(_dmfDefinitionGroupExecution.Entity);
        DMFSourceTarget sourceTarget = DMFSourceTarget::Target;
        FieldName fieldName = fieldStr(LedgerJournalEntityStaging, AccountDisplayValue);

        insert_recordset _log (DefinitionGroupName, ExecutionId, StagingRecId, StagingTableName, StagingColumnName, SourceTarget, EntityName, ErrorMessage)
            select DefinitionGroup, ExecutionId, RecId, tableName, fieldName, sourceTarget, entityName, error from staging
                where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                    && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                    && staging.TransferStatus == DMFTransferStatus::NotStarted
                    && !(staging.AccountDisplayValue || staging.OffsetAccountDisplayValue);

        update_recordset staging
            setting TransferStatus = DMFTransferStatus::Error
                where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                    && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                    && staging.TransferStatus == DMFTransferStatus::NotStarted
            exists join _log
                where _log.StagingRecId == staging.RecId
                    && _log.StagingTableName == tableName
                    && _log.ErrorMessage == error;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ValidateCreditDebitAmounts</Name>
				<Source><![CDATA[
    private static void ValidateCreditDebitAmounts(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution, DMFStagingValidationLog _log)
    {
        LedgerJournalEntityStaging staging;
        ErrorMsg error = "@SYS117889";
        TableName tableName = tableStr(LedgerJournalEntityStaging);
        TableName entityName = LedgerJournalEntity::getEntityName(_dmfDefinitionGroupExecution.Entity);
        DMFSourceTarget sourceTarget = DMFSourceTarget::Target;
        FieldName fieldName = fieldStr(LedgerJournalEntityStaging, CreditAmount);

        insert_recordset _log (DefinitionGroupName, ExecutionId, StagingRecId, StagingTableName, StagingColumnName, SourceTarget, EntityName, ErrorMessage)
            select DefinitionGroup, ExecutionId, RecId, tableName, fieldName, sourceTarget, entityName, error from staging
                where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                    && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                    && staging.TransferStatus == DMFTransferStatus::NotStarted
                    && ((staging.CreditAmount != 0.0 && staging.DebitAmount != 0.0)
                       || (staging.CreditAmount == 0.0 && staging.DebitAmount == 0.0 && staging.Quantity == 0.0));

        update_recordset staging
            setting TransferStatus = DMFTransferStatus::Error
                where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                    && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                    && staging.TransferStatus == DMFTransferStatus::NotStarted
            exists join _log
                where _log.StagingRecId == staging.RecId
                    && _log.StagingTableName == tableName
                    && _log.ErrorMessage == error;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAndUpdateExchangeRates</Name>
				<Source><![CDATA[
    private static void validateAndUpdateExchangeRates(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution, DMFStagingValidationLog _log)
    {
        // Entity lines that require an exchange rate to be looked up but one doesn't exist will be set to Error

        CurrencyCode ledgerCurrency = Ledger::accountingCurrency();
        CurrencyCode reportingCurrency = Ledger::reportingCurrency();
        ExchangeRateTypeRecId exchangeRateType = Ledger::defaultExchangeRateType();
        ExchangeRateTypeRecId reportingExchangeRateType = Ledger::reportingCurrencyExchangeRateType();
        ExchangeRateEffectiveView exchangeRateView;
        ExchangeRateEffectiveView reportingExchangeRateView;
        LedgerJournalEntityStaging staging;

        ErrorMsg error = "@GeneralLedger:EntityMessage_LedgerJournalEntityExchangeRateNotFound";

        LedgerJournalEntityLog entityLog;

        insert_recordset entityLog (LedgerJournalEntityRecId, ErrorMessage)
            select RecId, error from staging
            where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
               && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
               && staging.TransferStatus == DMFTransferStatus::NotStarted
               && staging.ExchangeRate == 0
            notexists join exchangeRateView
                where exchangeRateView.ExchangeRateType == exchangeRateType
                    && exchangeRateView.FromCurrencyCode == staging.CurrencyCode
                    && exchangeRateView.ToCurrencyCode == ledgerCurrency
                    && exchangeRateView.ValidFrom <= staging.TransDate
                    && exchangeRateView.ValidTo >= staging.TransDate;

        update_recordset staging
            setting TransferStatus = DMFTransferStatus::Error
        exists join entityLog
            where staging.RecId == entityLog.LedgerJournalEntityRecId;

        // write errors to DMF validation log
        FieldName fieldName = fieldStr(LedgerJournalEntityStaging, CurrencyCode);
        TableName tableName = tableStr(LedgerJournalEntityStaging);
        TableName entityName = LedgerJournalEntity::getEntityName(_dmfDefinitionGroupExecution.Entity);
        DMFSourceTarget sourceTarget = DMFSourceTarget::Target;

        insert_recordset _log (DefinitionGroupName, ExecutionId, StagingRecId, StagingTableName, StagingColumnName, SourceTarget, EntityName, ErrorMessage)
            select DefinitionGroup, ExecutionId, RecId, tableName, fieldName, sourceTarget, entityName from staging
        join ErrorMessage from entityLog
            where staging.RecId == entityLog.LedgerJournalEntityRecId;

        // Update the exchange rates where a rate exists.
        update_recordset staging
            setting ExchangeRate = exchangeRateView.ExchangeRate1,
                ExchangeRateSecondary = exchangeRateView.ExchangeRate2
            where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
               && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
               && staging.TransferStatus == DMFTransferStatus::NotStarted
               && staging.ExchangeRate == 0 // Don't update the exchange rate if one is provided
            join exchangeRateView
                where exchangeRateView.ExchangeRateType == exchangeRateType
                    && exchangeRateView.FromCurrencyCode == staging.CurrencyCode
                    && exchangeRateView.ToCurrencyCode == ledgerCurrency
                    && exchangeRateView.ValidFrom <= staging.TransDate
                    && exchangeRateView.ValidTo >= staging.TransDate;

        if (reportingCurrency && reportingCurrency != ledgerCurrency)
        {
            if (!reportingExchangeRateType)
            {
                reportingExchangeRateType = exchangeRateType;
            }

            // Update the reporting exchange rates where a rate exists.
            update_recordset staging
                setting ReportingCurrencyExchRate = reportingExchangeRateView.ExchangeRate1,
                    ReportingCurrencyExchRateSecondary = reportingExchangeRateView.ExchangeRate2
                where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                    && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                    && staging.TransferStatus == DMFTransferStatus::NotStarted
                    && staging.ReportingCurrencyExchRate == 0 // Don't update the exchange rate if one is provided
                join reportingExchangeRateView
                    where reportingExchangeRateView.ExchangeRateType == reportingExchangeRateType
                        && reportingExchangeRateView.FromCurrencyCode == staging.CurrencyCode
                        && reportingExchangeRateView.ToCurrencyCode == reportingCurrency
                        && reportingExchangeRateView.ValidFrom <= staging.TransDate
                        && reportingExchangeRateView.ValidTo >= staging.TransDate;
        }

        LedgerJournalEntity::updateReportingExchangeRatesForSameLedgerCurrencies(_dmfDefinitionGroupExecution);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateEntityUpdateForWorkflow</Name>
				<Source><![CDATA[
    private static void validateEntityUpdateForWorkflow(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution, DMFStagingValidationLog _log)
    {
        // checks the workflow status is approved by this entity then the records get set to error status.
        LedgerJournalEntityStaging staging;
        LedgerJournalEntityStaging stagingLocal;
        LedgerJournalEntityLog entityLog;

        ErrorMsg error = "@GeneralLedger:InvalidEntityUpdateForWorkflow";

        select JournalBatchNumber from  stagingLocal
            where stagingLocal.DefinitionGroup ==_dmfDefinitionGroupExecution.DefinitionGroup
               && stagingLocal.ExecutionId ==_dmfDefinitionGroupExecution.ExecutionId
               && stagingLocal.TransferStatus == DMFTransferStatus::NotStarted;

        boolean isValid = LedgerJournalEntityBase::isWorkflowDocumentEditable(stagingLocal.JournalBatchNumber);

        if (!isvalid)
        {
            insert_recordset entityLog (LedgerJournalEntityRecId, ErrorMessage)
                select RecId, error from staging
                where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                   && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                   && staging.TransferStatus == DMFTransferStatus::NotStarted;
            
            select firstonly RecId from  entityLog
                where entityLog.ErrorMessage == error;

            // write errors to DMF validation log
            update_recordset staging
                setting TransferStatus = DMFTransferStatus::Error
            exists join entityLog
                where staging.RecId == entityLog.LedgerJournalEntityRecId;

            select firstonly RecId from staging
                where staging.TransferStatus == DMFTransferStatus::Error;

            FieldName fieldName = fieldStr(LedgerJournalEntityStaging, JournalName);
            TableName tableName = tableStr(LedgerJournalEntityStaging);
            TableName entityName = LedgerJournalEntity::getEntityName(_dmfDefinitionGroupExecution.Entity);
            DMFSourceTarget sourceTarget = DMFSourceTarget::Target;

            insert_recordset _log (DefinitionGroupName, ExecutionId, StagingRecId, StagingTableName, StagingColumnName, SourceTarget, EntityName, ErrorMessage)
                select DefinitionGroup, ExecutionId, RecId, tableName, fieldName, sourceTarget, entityName from staging
            join ErrorMessage from entityLog
                where staging.RecId == entityLog.LedgerJournalEntityRecId;

            select firstonly RecId from _log
                where _log.StagingColumnName == fieldName;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateJournalType</Name>
				<Source><![CDATA[
    private static void validateJournalType(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution, DMFStagingValidationLog _log)
    {
        // Put any rows that are not of the Daily type into error state
        LedgerJournalName ledgerJournalName;
        LedgerJournalEntityStaging staging;

        LedgerJournalEntityLog entityLog;

        ErrorMsg error = "@GeneralLedger:EntityMessage_LedgerJournalEntityInvalidJournalName";

        insert_recordset entityLog (LedgerJournalEntityRecId, ErrorMessage)
            select RecId, error from staging
            where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
               && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
               && staging.TransferStatus == DMFTransferStatus::NotStarted
            exists join ledgerJournalName
                where staging.JournalName == ledgerJournalName.JournalName
                   && ledgerJournalName.JournalType != LedgerJournalType::Daily;

        // write errors to DMF validation log
        update_recordset staging
            setting TransferStatus = DMFTransferStatus::Error
        exists join entityLog
            where staging.RecId == entityLog.LedgerJournalEntityRecId;

        FieldName fieldName = fieldStr(LedgerJournalEntityStaging, JournalName);
        TableName tableName = tableStr(LedgerJournalEntityStaging);
        TableName entityName = LedgerJournalEntity::getEntityName(_dmfDefinitionGroupExecution.Entity);
        DMFSourceTarget sourceTarget = DMFSourceTarget::Target;

        insert_recordset _log (DefinitionGroupName, ExecutionId, StagingRecId, StagingTableName, StagingColumnName, SourceTarget, EntityName, ErrorMessage)
            select DefinitionGroup, ExecutionId, RecId, tableName, fieldName, sourceTarget, entityName from staging
        join ErrorMessage from entityLog
            where staging.RecId == entityLog.LedgerJournalEntityRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean isValid = LedgerJournalEntityBase::validateJournal(this);

        if (isValid)
        {
            isValid = super();
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean isValid = LedgerJournalEntityBase::validateJournal(this);

        if (isValid)
        {
            isValid = super();
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateEntityDataSource</Name>
				<Source><![CDATA[
    public boolean updateEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        LedgerJournalTrans originalLedgerJournalTrans;

        switch (_dataSourceCtx.name())
        {
            case dataEntityDataSourceStr(LedgerJournalEntity, LedgerJournalTrans):
                LedgerJournalTrans ledgerJournalTrans = _dataSourceCtx.getBuffer();
                originalLedgerJournalTrans = ledgerJournalTrans.orig();

                // When the journal setup voucher setting is set to "in connection with balance", the update
                // operation must revert to the original voucher number provided by defaulting in the
                // case where a new voucher number is provided as a consumer input value.
                if (ledgerJournalTrans.ledgerJournalTable().ledgerJournalName().NewVoucher == NewVoucher::BalanceSheet)
                {
                    if (ledgerJournalTrans.Voucher != originalLedgerJournalTrans.Voucher)
                    {
                        ledgerJournalTrans.Voucher = originalLedgerJournalTrans.Voucher;

                        _dataSourceCtx.setBuffer(ledgerJournalTrans);
                    }
                }

                LedgerJournalEntity ledgerJournalEntity = _entityCtx.getEntityRecord();

                this.resolveFinTags(ledgerJournalEntity, ledgerJournalTrans);

                break;
        }

        boolean ret = super(_entityCtx, _dataSourceCtx);

        if (ret && dataEntityDataSourceStr(LedgerJournalEntity, LedgerJournalTrans) == _dataSourceCtx.name())
        {
            LedgerJournalTrans ledgerJournalTrans = _dataSourceCtx.getBuffer();

            LedgerJournalEngine::determineCashDiscountForEntities(ledgerJournalTrans, originalLedgerJournalTrans);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postGetStagingData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the general journal staging table after population.
    /// </summary>
    /// <param name = "_dmfDefinitionGroupExecution">A data management framework definition group being executed.</param>
    /// <remarks>This method is called automatically by the data management framework.</remarks>
    public static void postGetStagingData(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution)
    {
        if (!LedgerJournalEntityBase::isJournalBatchNumberSequenceManual())
        {
            LedgerJournalEntityStaging staging;
            LedgerJournalEntityBaseTmp journalBatchNumberMap = LedgerJournalEntityBase::generateJournalNumbers(_dmfDefinitionGroupExecution, staging);

            update_recordset staging
                setting JournalBatchNumber = journalBatchNumberMap.NewJournalBatchNumber
                where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                    && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                    && staging.TransferStatus == DMFTransferStatus::NotStarted
                join NewJournalBatchNumber from journalBatchNumberMap
                where staging.JournalBatchNumber == journalBatchNumberMap.OldJournalBatchNumber;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateJournalUnposted</Name>
				<Source><![CDATA[
    private static void validateJournalUnposted(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution, DMFStagingValidationLog _log)
    {
        LedgerJournalEntityStaging staging;
        LedgerJournalEntityLog entityLog;
        LedgerJournalTable ledgerJournalTable_Exists;

        ErrorMsg error = strFmt("@GeneralLedger:JournalPosted");
        TableName tableName = tableStr(LedgerJournalEntityStaging);
        TableName entityName = LedgerJournalEntity::getEntityName(_dmfDefinitionGroupExecution.Entity);
        DMFSourceTarget sourceTarget = DMFSourceTarget::Target;
        FieldName fieldName = fieldStr(LedgerJournalEntityStaging, JournalBatchNumber);
        
        insert_recordset entityLog (LedgerJournalEntityRecId, ErrorMessage)
            select RecId, error from staging
            where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
               && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
               && staging.TransferStatus == DMFTransferStatus::NotStarted
            exists join ledgerJournalTable_Exists
                where ledgerJournalTable_Exists.JournalNum == staging.JournalBatchNumber
                    && ledgerJournalTable_Exists.Posted == NoYes::Yes;

        // write errors to DMF validation log
        update_recordset staging
            setting TransferStatus = DMFTransferStatus::Error
        exists join entityLog
            where staging.RecId == entityLog.LedgerJournalEntityRecId;
        
        insert_recordset _log (DefinitionGroupName, ExecutionId, StagingRecId, StagingTableName, StagingColumnName, SourceTarget, EntityName, ErrorMessage)
            select DefinitionGroup, ExecutionId, RecId, tableName, fieldName, sourceTarget, entityName from staging
        join ErrorMessage from entityLog
            where staging.RecId == entityLog.LedgerJournalEntityRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateJournalIsNotSystemBlocked</Name>
				<Source><![CDATA[
    private static void validateJournalIsNotSystemBlocked(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution, DMFStagingValidationLog _log)
    {
        LedgerJournalEntityStaging staging;
        LedgerJournalEntityLog entityLog;
        LedgerJournalTable ledgerJournalTable_Exists;

        ErrorMsg error = strFmt("@GeneralLedger:JournalSystemBlocked");
        TableName tableName = tableStr(LedgerJournalEntityStaging);
        TableName entityName = LedgerJournalEntity::getEntityName(_dmfDefinitionGroupExecution.Entity);
        DMFSourceTarget sourceTarget = DMFSourceTarget::Target;
        FieldName fieldName = fieldStr(LedgerJournalEntityStaging, JournalBatchNumber);
        
        insert_recordset entityLog (LedgerJournalEntityRecId, ErrorMessage)
            select RecId, error from staging
                where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                   && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                   && staging.TransferStatus == DMFTransferStatus::NotStarted
                exists join ledgerJournalTable_Exists
                    where ledgerJournalTable_Exists.JournalNum == staging.JournalBatchNumber
                        && ledgerJournalTable_Exists.SystemBlocked == NoYes::Yes;

        update_recordset staging
            setting TransferStatus = DMFTransferStatus::Error
        exists join entityLog
            where staging.RecId == entityLog.LedgerJournalEntityRecId;
        
        // write errors to DMF validation log
        insert_recordset _log (DefinitionGroupName, ExecutionId, StagingRecId, StagingTableName, StagingColumnName, SourceTarget, EntityName, ErrorMessage)
            select DefinitionGroup, ExecutionId, RecId, tableName, fieldName, sourceTarget, entityName from staging
        join ErrorMessage from entityLog
            where staging.RecId == entityLog.LedgerJournalEntityRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateJournalName</Name>
				<Source><![CDATA[
    private static void validateJournalName(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution, DMFStagingValidationLog _log)
    {
        // Put any rows that are not in Ledger journal name into error state
        LedgerJournalName ledgerJournalName;
        LedgerJournalEntityStaging staging;
        LedgerJournalEntityLog entityLog;        

        select firstonly JournalName from staging
            where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
               && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
               && staging.TransferStatus == DMFTransferStatus::NotStarted;

        ErrorMsg error = strFmt("@SYS22462", staging.JournalName);

        FieldName fieldName = fieldStr(LedgerJournalEntityStaging, JournalName);
        TableName tableName = tableStr(LedgerJournalEntityStaging);
        TableName entityName = LedgerJournalEntity::getEntityName(_dmfDefinitionGroupExecution.Entity);
        DMFSourceTarget sourceTarget = DMFSourceTarget::Target;

        insert_recordset entityLog (LedgerJournalEntityRecId, ErrorMessage)
            select RecId, error from staging
            where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
               && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
               && staging.TransferStatus == DMFTransferStatus::NotStarted
            notexists join ledgerJournalName
                where staging.JournalName == ledgerJournalName.JournalName;

        // write errors to DMF validation log
        update_recordset staging
            setting TransferStatus = DMFTransferStatus::Error
        exists join entityLog
            where staging.RecId == entityLog.LedgerJournalEntityRecId;
        
        insert_recordset _log (DefinitionGroupName, ExecutionId, StagingRecId, StagingTableName, StagingColumnName, SourceTarget, EntityName, ErrorMessage)
            select DefinitionGroup, ExecutionId, RecId, tableName, fieldName, sourceTarget, entityName from staging
        join ErrorMessage from entityLog
            where staging.RecId == entityLog.LedgerJournalEntityRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateJournalHeaderForDuplicateValues</Name>
				<Source><![CDATA[
    private static void validateJournalHeaderForDuplicateValues(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution, DMFStagingValidationLog _log)
    {
        LedgerJournalEntityStaging staging;
        LedgerJournalEntityStagingDuplicateHeaderView ledgerJournalEntityStagingDuplicateHeaderView;

        LedgerJournalEntityLog entityLog;
        const ErrorMsg error = "@GeneralLedger:SingleLedgerJournalBatchNumber";

        insert_recordset entityLog (LedgerJournalEntityRecId, ErrorMessage)
            select RecId, error from staging
            where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                && staging.TransferStatus == DMFTransferStatus::NotStarted
            exists join ledgerJournalEntityStagingDuplicateHeaderView
                where ledgerJournalEntityStagingDuplicateHeaderView.JournalBatchNumber == staging.JournalBatchNumber
                    && ledgerJournalEntityStagingDuplicateHeaderView.DefinitionGroup == staging.DefinitionGroup
                    && ledgerJournalEntityStagingDuplicateHeaderView.ExecutionId == staging.ExecutionId
                    && ledgerJournalEntityStagingDuplicateHeaderView.TransferStatus == staging.TransferStatus;

        int64 affectedRowCount = entityLog.RowCount();

        if (affectedRowCount)
        {
            //write errors to DMF validation log
            update_recordset staging
                setting TransferStatus = DMFTransferStatus::Error
            exists join entityLog
                where staging.RecId == entityLog.LedgerJournalEntityRecId;

            FieldName fieldName = fieldStr(LedgerJournalEntityStaging, Description);
            TableName tableName = tableStr(LedgerJournalEntityStaging);
            TableName entityName = LedgerJournalEntity::getEntityName(_dmfDefinitionGroupExecution.Entity);
            DMFSourceTarget sourceTarget = DMFSourceTarget::Target;

            insert_recordset _log (DefinitionGroupName, ExecutionId, StagingRecId, StagingTableName, StagingColumnName, SourceTarget, EntityName, ErrorMessage)
                select DefinitionGroup, ExecutionId, RecId, tableName, fieldName, sourceTarget, entityName from staging
                join ErrorMessage from entityLog
                    where staging.RecId == entityLog.LedgerJournalEntityRecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDelayTaxCalculation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a boolean value indicating whether to delay tax calculation.
    /// </summary>
    /// <returns>true to delay tax calculation; otherwise, false.</returns>
    /// <remarks>
    /// This setting is to handle environments where the set based processing reverts to row by row,
    /// and tax calculation severely degrades the import performance.
    /// </remarks>
    public static boolean getDelayTaxCalculation()
    {
        EventHandlerResult eventHandlerResult = new EventHandlerResult();
        eventHandlerResult.result(true);

        LedgerJournalEntity::getDelayTaxCalculationDelegate(eventHandlerResult);

        return eventHandlerResult.result();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDelayTaxCalculationDelegate</Name>
				<Source><![CDATA[
    static delegate void getDelayTaxCalculationDelegate(EventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateIsJournalDocumentEditable</Name>
				<Source><![CDATA[
    private static void validateIsJournalDocumentEditable(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution, DMFStagingValidationLog _log)
    {
        LedgerJournalEntityStaging staging;
        TableName tableName = tableStr(LedgerJournalEntityStaging);
        TableName entityName = LedgerJournalEntity::getEntityName(_dmfDefinitionGroupExecution.Entity);
        DMFSourceTarget sourceTarget = DMFSourceTarget::Target;
        LedgerJournalName LedgerJournalName;
        LedgerJournalTable ledgerJournalTable;
        ErrorMsg error = "@GeneralLedger:InvalidEntityUpdateAfterApproval";
        LedgerJournalId JournalBatchNumber;
        LedgerJournalEntityLog entityLog;

        insert_recordset entityLog (LedgerJournalEntityRecId, ErrorMessage)
            select RecId, error from staging
            where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                && staging.TransferStatus == DMFTransferStatus::NotStarted
            exists join ledgerJournalTable
                where ledgerJournalTable.JournalNum == staging.JournalBatchNumber
                    && ledgerJournalTable.Approver != 0
            exists join LedgerJournalName
                where LedgerJournalName.JournalName == ledgerJournalTable.JournalName
                    && LedgerJournalName.DataAreaId == ledgerJournalTable.DataAreaId
                    && LedgerJournalName.ApproveActive == NoYes::Yes;

        update_recordset staging
            setting TransferStatus = DMFTransferStatus::Error
        exists join entitylog
            where staging.RecId == entityLog.LedgerJournalEntityRecId;

        insert_recordset _log (DefinitionGroupName, ExecutionId, StagingRecId, StagingTableName, SourceTarget, EntityName, ErrorMessage)
            select DefinitionGroup, ExecutionId, RecId, tableName, sourceTarget, entityName from staging
        join ErrorMessage from entityLog
            where staging.RecId == entityLog.LedgerJournalEntityRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertEntityDataSource</Name>
				<Source><![CDATA[
    public boolean insertEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        LedgerJournalTransTaxExtension ledgerJournalTransTaxExtension = TaxJournalLineEntityHelper::setLedgerJournalTransTaxExtension(_dataSourceCtx);

        if (_dataSourceCtx.name() == dataEntityDataSourceStr(LedgerJournalEntity, LedgerJournalTrans))
        {
            LedgerJournalEntity ledgerJournalEntity = _entityCtx.getEntityRecord();
            LedgerJournalTrans ledgerJournalTrans = _dataSourceCtx.getBuffer();

            this.resolveFinTags(ledgerJournalEntity, ledgerJournalTrans);
        }

        boolean ret = super(_entityCtx, _dataSourceCtx);

        if (ret && _dataSourceCtx.name() == dataEntityDataSourceStr(LedgerJournalEntity, LedgerJournalTrans))
        {
            LedgerJournalTrans ledgerJournalTrans = _dataSourceCtx.getBuffer();

            LedgerJournalEngine::determineCashDiscountForEntities(ledgerJournalTrans);
        }

        // When <c>LedgerJournalTransTaxExtension</c> is not inserted successfully and it links well with <c>LedgerJournalTrans</c>,
        // it should try to insert/update the table <c>LedgerJournalTransTaxExtension</c> with set value.
        if (!ret && ledgerJournalTransTaxExtension.LedgerJournalTrans)
        {
            ttsbegin;
            LedgerJournalTrans ledgerJournalTrans = ledgerJournalTransTaxExtension.getLedgerJournalTrans();
            ledgerJournalTransTaxExtension.save(ledgerJournalTrans, true);
            ttscommit;

            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReportingExchangeRatesForSameLedgerCurrencies</Name>
				<Source><![CDATA[
    private static void updateReportingExchangeRatesForSameLedgerCurrencies(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution)
    {
        LedgerJournalEntityStaging staging;

        if (Ledger::isReportingCurrencySameAsAccountingCurrency())
        {
            update_recordset staging setting
                ReportingCurrencyExchRate = staging.ExchangeRate,
                ReportingCurrencyExchRateSecondary = staging.ExchangeRateSecondary
                    where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                        && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                        && staging.TransferStatus == DMFTransferStatus::NotStarted;

            if (staging.RowCount() > 0)
            {
                warning(strFmt("@GeneralLedger:ReportingExchangeRateAdjusted"));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAccountBlockedForManualEntry</Name>
				<Source><![CDATA[
    private static void validateAccountBlockedForManualEntry(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution, DMFStagingValidationLog _log, DimensionDataEntitySFKCacheTmp _dimensionDataEntitySFKCacheTmp)
    {
        LedgerJournalEntityStaging staging;
        DimensionAttributeValueCombination dimensionAttributeValueCombination;
        DimensionAttributeValue dimensionAttributeValue;
        DimensionAttribute dimensionAttribute;
        ErrorMsg error = "@GeneralLedger:ManualEntryisNotAllowed";
        TableName tableName = tableStr(LedgerJournalEntityStaging);
        TableName entityName = LedgerJournalEntity::getEntityName(_dmfDefinitionGroupExecution.Entity);
        DMFSourceTarget sourceTarget = DMFSourceTarget::Target;
        const DimensionHierarchyType hierarchyType = DimensionHierarchyType::DataEntityLedgerDimensionFormat;
        ExtendedDataTypeName dataType = identifierstr(DimensionDynamicAccount);
        MainAccountLegalEntity mainAccountLegalEntity;

        boolean isMainAccountLedgerOverrideDoNotAllowManualEntryFlightEnabled = FeatureStateProvider::isFeatureEnabled(MainAccountLedgerOverrideDoNotAllowManualEntryFlight::instance());
        
        FieldName fieldName = fieldStr(LedgerJournalEntityStaging, AccountDisplayValue);

        insert_recordset _log (DefinitionGroupName, ExecutionId, StagingRecId, StagingTableName, StagingColumnName, SourceTarget, EntityName, ErrorMessage)
            select DefinitionGroup, ExecutionId, RecId, tableName, fieldName, sourceTarget, entityName, error from staging
                where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                    && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                    && staging.TransferStatus == DMFTransferStatus::NotStarted
            join _dimensionDataEntitySFKCacheTmp
                where _dimensionDataEntitySFKCacheTmp.IntegrationString == staging.AccountDisplayValue
                    && _dimensionDataEntitySFKCacheTmp.EnumValue == staging.AccountType
                    && _dimensionDataEntitySFKCacheTmp.HierarchyType == hierarchyType
                    && _dimensionDataEntitySFKCacheTmp.ExtendedDataType == dataType
            join  dimensionAttributeValueCombination
                where dimensionAttributeValueCombination.RecId == _dimensionDataEntitySFKCacheTmp.ResolvedReference
            join dimensionAttributeValue
                where dimensionAttributeValue.EntityInstance == dimensionAttributeValueCombination.MainAccount
                    && dimensionAttributeValue.IsDeleted == 0
                    && dimensionAttributeValue.IsBlockedForManualEntry == NoYes::Yes
            join dimensionAttribute
                where dimensionAttribute.RecId == dimensionAttributeValue.DimensionAttribute
                    && dimensionAttribute.BackingEntityType == tableNum(DimAttributeMainAccount);

        if (isMainAccountLedgerOverrideDoNotAllowManualEntryFlightEnabled)
        {
            insert_recordset _log (DefinitionGroupName, ExecutionId, StagingRecId, StagingTableName, StagingColumnName, SourceTarget, EntityName, ErrorMessage)
                select DefinitionGroup, ExecutionId, RecId, tableName, fieldName, sourceTarget, entityName, error from staging
                    where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                        && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                        && staging.TransferStatus == DMFTransferStatus::NotStarted
                join _dimensionDataEntitySFKCacheTmp
                    where _dimensionDataEntitySFKCacheTmp.IntegrationString == staging.AccountDisplayValue
                        && _dimensionDataEntitySFKCacheTmp.EnumValue == staging.AccountType
                        && _dimensionDataEntitySFKCacheTmp.HierarchyType == hierarchyType
                        && _dimensionDataEntitySFKCacheTmp.ExtendedDataType == dataType
                join  dimensionAttributeValueCombination
                    where dimensionAttributeValueCombination.RecId == _dimensionDataEntitySFKCacheTmp.ResolvedReference
                join dimensionAttributeValue
                    where dimensionAttributeValue.EntityInstance == dimensionAttributeValueCombination.MainAccount
                        && dimensionAttributeValue.IsDeleted == 0
                        && dimensionAttributeValue.IsBlockedForManualEntry == NoYes::No
                join dimensionAttribute
                    where dimensionAttribute.RecId == dimensionAttributeValue.DimensionAttribute
                        && dimensionAttribute.BackingEntityType == tableNum(DimAttributeMainAccount)
                exists join mainAccountLegalEntity
                    where mainAccountLegalEntity.MainAccount == dimensionAttributeValueCombination.MainAccount
                        && mainAccountLegalEntity.DoNotAllowManualEntry == NoYes::Yes
                        && mainAccountLegalEntity.LegalEntity == CompanyInfo::current();
        }

        fieldName = fieldStr(LedgerJournalEntityStaging, OffsetAccountDisplayValue);

        insert_recordset _log (DefinitionGroupName, ExecutionId, StagingRecId, StagingTableName, StagingColumnName, SourceTarget, EntityName, ErrorMessage)
            select DefinitionGroup, ExecutionId, RecId, tableName, fieldName, sourceTarget, entityName, error from staging
                where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                    && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                    && staging.TransferStatus == DMFTransferStatus::NotStarted
            join _dimensionDataEntitySFKCacheTmp
                where _dimensionDataEntitySFKCacheTmp.IntegrationString == staging.OffsetAccountDisplayValue
                    && _dimensionDataEntitySFKCacheTmp.EnumValue == staging.AccountType
                    && _dimensionDataEntitySFKCacheTmp.HierarchyType == hierarchyType
                    && _dimensionDataEntitySFKCacheTmp.ExtendedDataType == dataType
            join  dimensionAttributeValueCombination
                where dimensionAttributeValueCombination.RecId == _dimensionDataEntitySFKCacheTmp.ResolvedReference
            join dimensionAttributeValue
                where dimensionAttributeValue.EntityInstance == dimensionAttributeValueCombination.MainAccount
                    && dimensionAttributeValue.IsDeleted == 0
                    && dimensionAttributeValue.IsBlockedForManualEntry == NoYes::Yes
            join dimensionAttribute
                where dimensionAttribute.RecId == dimensionAttributeValue.DimensionAttribute
                    && dimensionAttribute.BackingEntityType == tableNum(DimAttributeMainAccount);

        if (isMainAccountLedgerOverrideDoNotAllowManualEntryFlightEnabled)
        {
            insert_recordset _log (DefinitionGroupName, ExecutionId, StagingRecId, StagingTableName, StagingColumnName, SourceTarget, EntityName, ErrorMessage)
                select DefinitionGroup, ExecutionId, RecId, tableName, fieldName, sourceTarget, entityName, error from staging
                    where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                        && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                        && staging.TransferStatus == DMFTransferStatus::NotStarted
                join _dimensionDataEntitySFKCacheTmp
                    where _dimensionDataEntitySFKCacheTmp.IntegrationString == staging.OffsetAccountDisplayValue
                        && _dimensionDataEntitySFKCacheTmp.EnumValue == staging.AccountType
                        && _dimensionDataEntitySFKCacheTmp.HierarchyType == hierarchyType
                        && _dimensionDataEntitySFKCacheTmp.ExtendedDataType == dataType
                join  dimensionAttributeValueCombination
                    where dimensionAttributeValueCombination.RecId == _dimensionDataEntitySFKCacheTmp.ResolvedReference
                join dimensionAttributeValue
                    where dimensionAttributeValue.EntityInstance == dimensionAttributeValueCombination.MainAccount
                        && dimensionAttributeValue.IsDeleted == 0
                        && dimensionAttributeValue.IsBlockedForManualEntry == NoYes::No
                join dimensionAttribute
                    where dimensionAttribute.RecId == dimensionAttributeValue.DimensionAttribute
                        && dimensionAttribute.BackingEntityType == tableNum(DimAttributeMainAccount)
                exists join mainAccountLegalEntity
                    where mainAccountLegalEntity.MainAccount == dimensionAttributeValueCombination.MainAccount
                        && mainAccountLegalEntity.DoNotAllowManualEntry == NoYes::Yes
                        && mainAccountLegalEntity.LegalEntity == CompanyInfo::current();
        }

        update_recordset staging
            setting TransferStatus = DMFTransferStatus::Error
                where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                    && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                    && staging.TransferStatus == DMFTransferStatus::NotStarted
            exists join _log
                where _log.StagingRecId == staging.RecId
                    && _log.StagingTableName == tableName
                    && _log.ErrorMessage == error;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateStaging</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes additional staging table update logic.
    /// </summary>
    /// <param name = "_dmfDefinitionGroupExecution">A data management framework definition group being executed.</param>
    /// <remarks>This is the the intended CoC extension point.</remarks>
    protected static void updateStaging(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLedgerJournalTransSettleVoucher</Name>
				<Source><![CDATA[
    private static void updateLedgerJournalTransSettleVoucher(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution)
    {
        LedgerJournalTrans ledgerJournalTrans;
        LedgerJournalEntityStaging staging;

        if (CustParameters::find().AutoSettle)
        {
            update_recordset ledgerJournalTrans
                setting SettleVoucher = SettlementType::OpenTransact
                where (ledgerJournalTrans.AccountType == LedgerJournalACType::Cust
                        || ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Cust)
                    && ledgerJournalTrans.SettleVoucher != SettlementType::SelectedTransact
                join staging
                    where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                    && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                    && staging.TransferStatus == DMFTransferStatus::NotStarted
                    && staging.JournalBatchNumber == ledgerJournalTrans.JournalNum
                    && staging.LineNumber == ledgerJournalTrans.LineNum;
        }

        if (VendParameters::find().AutoSettle)
        {
            update_recordset ledgerJournalTrans
                setting SettleVoucher = SettlementType::OpenTransact
                where (ledgerJournalTrans.AccountType == LedgerJournalACType::Vend
                        || ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Vend)
                    && ledgerJournalTrans.SettleVoucher != SettlementType::SelectedTransact
                join staging
                    where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                    && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                    && staging.TransferStatus == DMFTransferStatus::NotStarted
                    && staging.JournalBatchNumber == ledgerJournalTrans.JournalNum
                    && staging.LineNumber == ledgerJournalTrans.LineNum;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFinTags</Name>
				<Source><![CDATA[
    private static void updateFinTags(FinTagLedgerJournalEntityContract _contract)
    {
        if (FinTagConfiguration::isFinTagConfigurationSetInAtLeastOneCompany())
        {
            DMFDefinitionGroupExecution dmfDefinitionGroupExecution = _contract.dmfDefinitionGroupExecution;
            FinTagDataEntitySFKCacheTmp primaryStagingTmp = _contract.primaryStagingTmp;
            FinTagDataEntitySFKCacheTmp offsetStagingTmp = _contract.offsetStagingTmp;

            LedgerJournalTable ledgerJournalTable_Exists;
            LedgerJournalTrans ledgerJournalTrans;
            LedgerJournalEntityStaging staging;
            
            ledgerJournalTrans.skipDataMethods(true);

            if (LedgerJournalEntityAdditionalSkipEventsFlight::instance().isEnabled())
            {
                ledgerJournalTrans.skipEvents(true);
                ledgerJournalTrans.skipDatabaseLog(true);
            }

            update_recordset ledgerJournalTrans
                    setting FinTag = primaryStagingTmp.ResolvedReference
                    join staging
                        where staging.DefinitionGroup == dmfDefinitionGroupExecution.DefinitionGroup
                            && staging.ExecutionId == dmfDefinitionGroupExecution.ExecutionId
                            && staging.TransferStatus == DMFTransferStatus::NotStarted
                            && staging.JournalBatchNumber == ledgerJournalTrans.JournalNum
                            && staging.LineNumber == ledgerJournalTrans.LineNum
                    join primaryStagingTmp
                        where primaryStagingTmp.StagingRecId == staging.RecId
                            && primaryStagingTmp.Found == NoYes::Yes
                            && ledgerJournalTrans.FinTag != primaryStagingTmp.ResolvedReference
                    notexists join ledgerJournalTable_Exists
                        where ledgerJournalTable_Exists.JournalNum == ledgerJournalTrans.JournalNum
                            && ledgerJournalTable_Exists.Posted == NoYes::Yes;

            update_recordset ledgerJournalTrans
                    setting OffsetFinTag = offsetStagingTmp.ResolvedReference
                    join staging
                        where staging.DefinitionGroup == dmfDefinitionGroupExecution.DefinitionGroup
                            && staging.ExecutionId == dmfDefinitionGroupExecution.ExecutionId
                            && staging.TransferStatus == DMFTransferStatus::NotStarted
                            && staging.JournalBatchNumber == ledgerJournalTrans.JournalNum
                            && staging.LineNumber == ledgerJournalTrans.LineNum
                    join offsetStagingTmp
                        where offsetStagingTmp.StagingRecId == staging.RecId
                            && offsetStagingTmp.Found == NoYes::Yes
                            && ledgerJournalTrans.OffsetFinTag != offsetStagingTmp.ResolvedReference
                    notexists join ledgerJournalTable_Exists
                        where ledgerJournalTable_Exists.JournalNum == ledgerJournalTrans.JournalNum
                            && ledgerJournalTable_Exists.Posted == NoYes::Yes;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveFinTags</Name>
				<Source><![CDATA[
    private void resolveFinTags(LedgerJournalEntity _entity, LedgerJournalTrans _ledgerJournalTrans)
    {
        if (LedgerJournalBasedEntityFinTagResolverHelperFlight::instance().isEnabled())
        {
            LedgerJournalBasedEntityFinTagResolverHelper::resolveFinTagsForLedgerJournalTrans(_entity.FinTagDisplayValue, _entity.OffsetFinTagDisplayValue, _ledgerJournalTrans);
        }
        else
        {
            _ledgerJournalTrans.FinTag = FinTagResolver::resolve(_entity.FinTagDisplayValue, _ledgerJournalTrans.Company);
            _ledgerJournalTrans.OffsetFinTag = FinTagResolver::resolve(_entity.OffsetFinTagDisplayValue, _ledgerJournalTrans.OffsetCompany);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>markTaxDocumentDirty</Name>
				<Source><![CDATA[
    private static void markTaxDocumentDirty(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution)
    {
        TaxDocument taxDocument;
        TransitDocumentType_IN transitDocumentType;
        TaxDocumentTransitRelation taxDocumentTransitRelation;
        TaxDocumentTransitDocument transitDocument;
        TaxEngineLedgerJournalTransHeader taxEngineLedgerJournalTransHeader;
        LedgerJournalTable ledgerJournalTable;
        LedgerJournalEntityStaging staging;

        update_recordset taxDocument
            setting TaxDocumentTaxStatus = TaxDocumentCalculationLevel::Dirty
            join transitDocument
                where transitDocument.TaxDocument == taxDocument.TaxDocumentGuid
            join transitDocumentType
                where transitDocumentType.RefTableId == transitDocument.TableId
            join taxDocumentTransitRelation
                where taxDocumentTransitRelation.TransitDocumentType == transitDocumentType.RecId
                    && taxDocumentTransitRelation.TransitDocumentRecId == transitDocument.RecId
            join taxEngineLedgerJournalTransHeader
                where taxEngineLedgerJournalTransHeader.RecId == taxDocumentTransitRelation.TransactionRecId
                    && taxEngineLedgerJournalTransHeader.TableId == taxDocumentTransitRelation.TransactionType
            join ledgerJournalTable
                where ledgerJournalTable.JournalNum == taxEngineLedgerJournalTransHeader.JournalNum
                    && ledgerJournalTable.Posted == NoYes::No
            exists join staging
                where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                    && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                    && staging.TransferStatus == DMFTransferStatus::NotStarted
                    && staging.JournalBatchNumber == ledgerJournalTable.JournalNum;

    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<FormRef>LedgerJournalTable</FormRef>
	<Label>@GeneralLedger:LedgerJournalEntityLabel</Label>
	<Tags>Journal</Tags>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>LedgerJournalEntityStaging</DataManagementStagingTable>
	<EntityCategory>Document</EntityCategory>
	<Modules>GeneralLedger</Modules>
	<PrimaryCompanyContext>DataAreaId</PrimaryCompanyContext>
	<PrimaryKey>EntityKey</PrimaryKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>IsWithholdingCalculationEnabled</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemWithholdingTaxGroupCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ChineseVoucherType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ChineseVoucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DiscountPercentage</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CreditAmount</Name>
			<DataField>AmountCurCredit</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DebitAmount</Name>
			<DataField>AmountCurDebit</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>JournalBatchNumber</Name>
			<Mandatory>No</Mandatory>
			<DataField>JournalNum</DataField>
			<DataSource>LedgerJournalTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AccountType</Name>
			<DataField>AccountType</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Account</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>LedgerDimension</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
			<DimensionLegalEntityContextField>DataAreaId</DimensionLegalEntityContextField>
			<DynamicDimensionEnumerationField>AccountType</DynamicDimensionEnumerationField>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AccountDisplayValue</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@SYS24500</Label>
			<Mandatory>No</Mandatory>
			<DataField>DisplayValue</DataField>
			<DataSource>DimensionCombinationEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>OffsetAccountType</Name>
			<DataField>OffsetAccountType</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>OffsetAccount</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>OffsetLedgerDimension</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
			<DimensionLegalEntityContextField>DataAreaId</DimensionLegalEntityContextField>
			<DynamicDimensionEnumerationField>OffsetAccountType</DynamicDimensionEnumerationField>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>OffsetAccountDisplayValue</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@SYS11162</Label>
			<Mandatory>No</Mandatory>
			<DataField>DisplayValue</DataField>
			<DataSource>OffsetDimensionCombinationEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Quantity</Name>
			<DataField>Qty</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TransDate</Name>
			<DataField>TransDate</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Text</Name>
			<DataField>Txt</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Voucher</Name>
			<DataField>Voucher</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CurrencyCode</Name>
			<DataField>CurrencyCode</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PostingLayer</Name>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<DataField>CurrentOperationsTax</DataField>
			<DataSource>LedgerJournalTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>JournalName</Name>
			<DataField>JournalName</DataField>
			<DataSource>LedgerJournalTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>LineNumber</Name>
			<Mandatory>Yes</Mandatory>
			<DataField>LineNum</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>IsPosted</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<DataField>Posted</DataField>
			<DataSource>LedgerJournalTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DelayTaxCalculation</Name>
			<AccessModifier>Internal</AccessModifier>
			<DataField>DelayTaxCalculation</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Description</Name>
			<DataField>Name</DataField>
			<DataSource>LedgerJournalTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>OffsetText</Name>
			<DataField>OffsetTxt</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ExchangeRate</Name>
			<DataField>ExchRate</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ExchangeRateSecondary</Name>
			<DataField>ExchRateSecond</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>IsWithholdingCalculationEnabled</Name>
			<Mandatory>No</Mandatory>
			<DataField>TaxWithholdCalculate_TH</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ItemWithholdingTaxGroupCode</Name>
			<Mandatory>No</Mandatory>
			<DataField>TaxWithholdItemGroup</DataField>
			<DataSource>TaxWithholdItemGroupHeading_TH</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ChineseVoucherTypeRecId</Name>
			<AccessModifier>Private</AccessModifier>
			<Mandatory>No</Mandatory>
			<DataField>LedgerVoucherType_CN</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ChineseVoucherType</Name>
			<AllowEdit>Yes</AllowEdit>
			<Mandatory>No</Mandatory>
			<DataField>Id</DataField>
			<DataSource>LedgerVoucherType_CN</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ChineseVoucher</Name>
			<DataField>Voucher_CN</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DiscountPercentage</Name>
			<DataField>CashDiscPercent</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CashDiscountAmount</Name>
			<DataField>CashDiscAmount</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Invoice</Name>
			<DataField>Invoice</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DueDate</Name>
			<DataField>Due</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PaymentId</Name>
			<DataField>PaymId</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TaxExemptNumber</Name>
			<DataField>VATNumJournal</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>SalesTaxCode</Name>
			<DataField>TaxCode</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ItemSalesTaxGroup</Name>
			<DataField>TaxItemGroup</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CashDiscount</Name>
			<DataField>CashDiscCode</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CashDiscountDate</Name>
			<DataField>DateCashDisc</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Document</Name>
			<DataField>DocumentNum</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PaymentMethod</Name>
			<DataField>PaymMode</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PostingProfile</Name>
			<DataField>PostingProfile</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>SalesTaxGroup</Name>
			<DataField>TaxGroup</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PaymentReference</Name>
			<DataField>PaymReference</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DefaultDimension</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>DefaultDimension</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
			<DimensionLegalEntityContextField>DataAreaId</DimensionLegalEntityContextField>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>OffsetDefaultDimension</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>OffsetDefaultDimension</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
			<DimensionLegalEntityContextField>DataAreaId</DimensionLegalEntityContextField>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DefaultDimensionDisplayValue</Name>
			<DataField>DisplayValue</DataField>
			<DataSource>DefaultDimension</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>OffsetDefaultDimensionDisplayValue</Name>
			<DataField>DisplayValue</DataField>
			<DataSource>OffsetDefaultDimension</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ReverseDate</Name>
			<DataField>ReverseDate</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ReverseEntry</Name>
			<DataField>ReverseEntry</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DocumentDate</Name>
			<DataField>DocumentDate</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>InvoiceIdentification</Name>
			<DataField>InvoiceIdentification</DataField>
			<DataSource>LedgerJournalTransTaxExtensionIN</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProvisionalAssessment</Name>
			<DataField>ProvisionalAssessment</DataField>
			<DataSource>LedgerJournalTransTaxExtensionIN</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AssessableValueTransactionCurrency</Name>
			<DataField>AssessableValueTransactionCurrency</DataField>
			<DataSource>LedgerJournalTransTaxExtensionIN</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>MaximumRetailPrice</Name>
			<DataField>MaximumRetailPrice</DataField>
			<DataSource>LedgerJournalTransTaxExtensionIN</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TaxWithholdCode</Name>
			<DataField>TaxWithholdCode</DataField>
			<DataSource>LedgerJournalTransTaxExtensionIN</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TCSGroup</Name>
			<DataField>TCSGroup</DataField>
			<DataSource>LedgerJournalTransTaxExtensionIN</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TDSGroup</Name>
			<DataField>TDSGroup</DataField>
			<DataSource>LedgerJournalTransTaxExtensionIN</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ReportingCurrencyExchRate</Name>
			<DataField>ReportingCurrencyExchRate</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ReportingCurrencyExchRateSecondary</Name>
			<DataField>ReportingCurrencyExchRateSecondary</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>InvoiceDate</Name>
			<CountryRegionCodes>TH</CountryRegionCodes>
			<Mandatory>No</Mandatory>
			<DataField>InvoiceDate</DataField>
			<DataSource>LedgerJournalTransExtensionTH</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>InvoiceReceiptDate</Name>
			<CountryRegionCodes>TH</CountryRegionCodes>
			<Mandatory>No</Mandatory>
			<DataField>InvoiceReceiptDate</DataField>
			<DataSource>LedgerJournalTransExtensionTH</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TaxInvoiceReceiptDate</Name>
			<CountryRegionCodes>TH</CountryRegionCodes>
			<Mandatory>No</Mandatory>
			<DataField>TaxInvoiceReceiptDate</DataField>
			<DataSource>LedgerJournalTransExtensionTH</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AcknowledgementDate</Name>
			<Mandatory>No</Mandatory>
			<DataField>AcknowledgementDate</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Prepayment</Name>
			<DataField>Prepayment</DataField>
			<DataSource>LedgerJournalTrans</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>OverrideSalesTax</Name>
			<DataField>OverrideSalesTax</DataField>
			<DataSource>LedgerJournalTransTaxExtension</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>FinTagDisplayValue</Name>
			<Mandatory>No</Mandatory>
			<DataField>DisplayValue</DataField>
			<DataSource>FinTag</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>OffsetFinTagDisplayValue</Name>
			<Label>@FinTag:FinTag_OffsetDisplayValue</Label>
			<Mandatory>No</Mandatory>
			<DataField>DisplayValue</DataField>
			<DataSource>OffsetFinTag</DataSource>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>JournalBatchNumber</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>LineNumber</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings>
		<AxTableMapping>
			<MappingTable>LedgerJournalEntityBase</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>Description</MapField>
					<MapFieldTo>Description</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>JournalBatchNumber</MapField>
					<MapFieldTo>JournalBatchNumber</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>JournalName</MapField>
					<MapFieldTo>JournalName</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Ranges />
	<Relations>
		<AxDataEntityViewRelation>
			<Name>LegalEntity</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<RelatedDataEntity>OMLegalEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ZeroOne</RelatedDataEntityCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>RelationConstraintField1</Name>
					<Field>dataAreaId</Field>
					<RelatedField>LegalEntityId</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
		</AxDataEntityViewRelation>
		<AxDataEntityViewRelation>
			<Name>LedgerDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedDataEntity>DimensionCombinationEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ZeroOne</RelatedDataEntityCardinality>
			<RelatedDataEntityRole>LedgerDimensionCombination</RelatedDataEntityRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LedgerDimension</Role>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>RelationConstraintField1</Name>
					<Field>Account</Field>
					<RelatedField>RecId</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
		</AxDataEntityViewRelation>
		<AxDataEntityViewRelation>
			<Name>OffsetLedgerDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedDataEntity>DimensionCombinationEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ZeroOne</RelatedDataEntityCardinality>
			<RelatedDataEntityRole>OffsetLedgerDimensionCombination</RelatedDataEntityRole>
			<RelationshipType>Association</RelationshipType>
			<Role>OffsetLedgerDimension</Role>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>RelationConstraintField1</Name>
					<Field>OffsetAccount</Field>
					<RelatedField>RecId</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
		</AxDataEntityViewRelation>
		<AxDataEntityViewRelation xmlns=""
			i:type="AxDataEntityViewRelationForeignKey">
			<Name>LedgerVoucherTypeEntity</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedDataEntity>LedgerVoucherTypeEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ZeroOne</RelatedDataEntityCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>RelationConstraintField1</Name>
					<Field>ChineseVoucherType</Field>
					<RelatedField>VoucherType</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
		</AxDataEntityViewRelation>
	</Relations>
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>LedgerJournalTable</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>LedgerJournalTable</Table>
				<DataSources>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>LedgerJournalTrans</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>LedgerJournalTrans</Table>
						<DataSources>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>DimensionCombinationEntity</Name>
								<DynamicFields>Yes</DynamicFields>
								<IsReadOnly>Yes</IsReadOnly>
								<Table>DimensionCombinationEntity</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<JoinMode>OuterJoin</JoinMode>
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1</Name>
										<Field>LedgerDimension</Field>
										<JoinDataSource>LedgerJournalTrans</JoinDataSource>
										<RelatedField>RecId</RelatedField>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>OffsetDimensionCombinationEntity</Name>
								<DynamicFields>Yes</DynamicFields>
								<IsReadOnly>Yes</IsReadOnly>
								<Table>DimensionCombinationEntity</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<JoinMode>OuterJoin</JoinMode>
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1</Name>
										<Field>OffsetLedgerDimension</Field>
										<JoinDataSource>LedgerJournalTrans</JoinDataSource>
										<RelatedField>RecId</RelatedField>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>TaxWithholdItemGroupHeading_TH</Name>
								<DynamicFields>Yes</DynamicFields>
								<IsReadOnly>Yes</IsReadOnly>
								<Table>TaxWithholdItemGroupHeading_TH</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<JoinMode>OuterJoin</JoinMode>
								<UseRelations>Yes</UseRelations>
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1</Name>
										<Field>TaxWithholdItemGroupHeading_TH</Field>
										<JoinDataSource>LedgerJournalTrans</JoinDataSource>
										<RelatedField>RecId</RelatedField>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>LedgerVoucherType_CN</Name>
								<DynamicFields>Yes</DynamicFields>
								<IsReadOnly>Yes</IsReadOnly>
								<Table>LedgerVoucherType_CN</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<JoinMode>OuterJoin</JoinMode>
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1</Name>
										<Field>LedgerVoucherType_CN</Field>
										<JoinDataSource>LedgerJournalTrans</JoinDataSource>
										<JoinRelationName>LedgerVoucherType_CN</JoinRelationName>
										<RelatedField>RecId</RelatedField>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>DefaultDimension</Name>
								<DynamicFields>Yes</DynamicFields>
								<IsReadOnly>Yes</IsReadOnly>
								<Table>DimensionSetEntity</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<JoinMode>OuterJoin</JoinMode>
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1</Name>
										<Field>DefaultDimension</Field>
										<JoinDataSource>LedgerJournalTrans</JoinDataSource>
										<RelatedField>RecId</RelatedField>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>OffsetDefaultDimension</Name>
								<DynamicFields>Yes</DynamicFields>
								<IsReadOnly>Yes</IsReadOnly>
								<Table>DimensionSetEntity</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<JoinMode>OuterJoin</JoinMode>
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1</Name>
										<Field>OffsetDefaultDimension</Field>
										<JoinDataSource>LedgerJournalTrans</JoinDataSource>
										<RelatedField>RecId</RelatedField>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>LedgerJournalTransTaxExtensionIN</Name>
								<DynamicFields>Yes</DynamicFields>
								<Table>LedgerJournalTransTaxExtensionIN</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<JoinMode>OuterJoin</JoinMode>
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1</Name>
										<Field>RecId</Field>
										<JoinDataSource>LedgerJournalTrans</JoinDataSource>
										<RelatedField>LedgerJournalTrans</RelatedField>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>LedgerJournalTransExtensionTH</Name>
								<DynamicFields>Yes</DynamicFields>
								<Table>LedgerJournalTransExtensionTH</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<JoinMode>OuterJoin</JoinMode>
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1</Name>
										<Field>RecId</Field>
										<JoinDataSource>LedgerJournalTrans</JoinDataSource>
										<RelatedField>LedgerJournalTrans</RelatedField>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>LedgerJournalTransTaxExtension</Name>
								<DynamicFields>Yes</DynamicFields>
								<Table>LedgerJournalTransTaxExtension</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<JoinMode>OuterJoin</JoinMode>
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1</Name>
										<Field>RecId</Field>
										<JoinDataSource>LedgerJournalTrans</JoinDataSource>
										<RelatedField>LedgerJournalTrans</RelatedField>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>FinTag</Name>
								<DynamicFields>Yes</DynamicFields>
								<IsReadOnly>Yes</IsReadOnly>
								<Table>FinTag</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<JoinMode>OuterJoin</JoinMode>
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1</Name>
										<Field>FinTag</Field>
										<JoinDataSource>LedgerJournalTrans</JoinDataSource>
										<RelatedField>RecId</RelatedField>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>OffsetFinTag</Name>
								<DynamicFields>Yes</DynamicFields>
								<IsReadOnly>Yes</IsReadOnly>
								<Table>FinTag</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<JoinMode>OuterJoin</JoinMode>
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1</Name>
										<Field>OffsetFinTag</Field>
										<JoinDataSource>LedgerJournalTrans</JoinDataSource>
										<RelatedField>RecId</RelatedField>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
						</DataSources>
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>JournalNum</Field>
								<JoinDataSource>LedgerJournalTable</JoinDataSource>
								<RelatedField>JournalNum</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
				</DataSources>
				<DerivedDataSources />
				<Fields />
				<Ranges>
					<AxQuerySimpleDataSourceRange>
						<Name>JournalType</Name>
						<Field>JournalType</Field>
						<Value>Daily</Value>
					</AxQuerySimpleDataSourceRange>
				</Ranges>
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>