<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetParametersEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BudgetParametersEntity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean isValid;

        isValid = super(_fieldIdToCheck);

        if (isValid)
        {
            switch (_fieldIdToCheck)
            {
                case (fieldNum(BudgetParametersEntity, UseFrenchPublicSectorAccountingRules)) :
                    if (this.RecId)
                    {
                        // Validate the existence of commitments when the parameter record exists indicating an active system.
                        if (this.UseFrenchPublicSectorAccountingRules == NoYes::No && PurchCommitmentHeader_PSN::existCommitmentForCurrentFiscalYear())
                        {
                            isValid = checkFailed("@Budget:BudgetParametersFrenchCommitmentsErrorMessage");
                        }
                    }
                    break;

                case (fieldNum(BudgetParametersEntity, UseGeneralBudgetReservationPublicSectorAccountingRules)):
                    if (this.RecId
                        && (this.UseGeneralBudgetReservationPublicSectorAccountingRules == NoYes::No
                            && BudgetReservationHeader_PSN::existDraftOrPostedBudgetReservations()))
                    {
                        isValid = checkFailed("@Budgeting_BudgetReservationPS:BudgetParametersBudgetReservationErrorMessage");
                    }
                    break;

                default:
                    break;
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupBudgetJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the serialized string of the <c>OfficeAppCustomLookupListResult</c> object for the list of budget journals.
    /// </summary>
    /// <param name="_entityFields">
    /// The <c>Array</c> of entity fields values on the instance performing the lookup.
    /// </param>
    /// <returns>
    /// The serialized string of the <c>OfficeAppCustomLookupListResult</c> object for the list of budget journals.
    /// </returns>
    [SysODataActionAttribute("BudgetParametersEntityBudgetJournalLookup", false),
     SysODataCollectionAttribute("_fields", Types::String),
     SysODataFieldLookupAttribute("BudgetJournal")]
    public static str lookupBudgetJournal(Array _fields)
    {
        List lookupList = new List(Types::String);

        LegalEntityDataAreaId dataAreaId = BudgetEntityHelper::getLegalEntityIdFromOfficeAppCustomLookupFields(
            tableStr(BudgetParametersEntity),
            fieldStr(BudgetParametersEntity, dataAreaId),
            _fields);

        if (dataAreaId)
        {
            changecompany(dataAreaId)
            {
                LedgerJournalName ledgerJournalName;

                while select JournalName from ledgerJournalName
                   where ledgerJournalName.JournalType == LedgerJournalType::Budget
                {
                    lookupList.addEnd(ledgerJournalName.JournalName);
                }
            }
        }

        return BudgetEntityHelper::getSerializedOfficeAppCustomLookupListResult(lookupList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupAllocationKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the serialized string of the <c>OfficeAppCustomLookupListResult</c> object for the list of allocation keys.
    /// </summary>
    /// <param name="_entityFields">
    /// The <c>Array</c> of entity fields values on the instance performing the lookup.
    /// </param>
    /// <returns>
    /// The serialized string of the <c>OfficeAppCustomLookupListResult</c> object for the list of allocation keys.
    /// </returns>
    [SysODataActionAttribute("BudgetParametersEntityAllocationKeyLookup", false),
     SysODataCollectionAttribute("_fields", Types::String),
     SysODataFieldLookupAttribute("AllocationKey")]
    public static str lookupAllocationKey(Array _fields)
    {
        List lookupList = new List(Types::String);

        LegalEntityDataAreaId dataAreaId = BudgetEntityHelper::getLegalEntityIdFromOfficeAppCustomLookupFields(
            tableStr(BudgetParametersEntity),
            fieldStr(BudgetParametersEntity, dataAreaId),
            _fields);

        if (dataAreaId)
        {
            changecompany(dataAreaId)
            {
                LedgerAllocateKey ledgerAllocateKey;

                while select Key from ledgerAllocateKey
                {
                    lookupList.addEnd(ledgerAllocateKey.Key);
                }
            }
        }

        return BudgetEntityHelper::getSerializedOfficeAppCustomLookupListResult(lookupList);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasicBudget</ConfigurationKey>
	<DeveloperDocumentation>@Budget:BudgetParametersEntityDeveloperDocumentation</DeveloperDocumentation>
	<Label>@Budget:BudgetParameters</Label>
	<Tags>Ledger budget setup</Tags>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>BudgetParametersStaging</DataManagementStagingTable>
	<EntityCategory>Parameters</EntityCategory>
	<IsPublic>Yes</IsPublic>
	<Modules>Budgeting</Modules>
	<PrimaryCompanyContext>DataAreaId</PrimaryCompanyContext>
	<PrimaryKey>EntityKey</PrimaryKey>
	<PublicCollectionName>BudgetParameters</PublicCollectionName>
	<PublicEntityName>BudgetParameters</PublicEntityName>
	<SupportsSetBasedSqlOperations>Yes</SupportsSetBasedSqlOperations>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DataAreaId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AllocationKey</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UseRulesForBudgetTransfers</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BudgetJournal</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CheckRevenueBudgetForZeroBudgetBalances</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TimePeriodForBudgetBalances</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DoCompleteRegisterEntriesOnTransferFromProject</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DoCompleteRegisterEntriesOnTransferFromFixedAssets</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DoCompleteRegisterEntriesOnTransferFromDemandForecast</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DoCompleteRegisterEntriesOnTransferFromSupplyForecast</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UseFrenchPublicSectorAccountingRules</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UseGeneralBudgetReservationPublicSectorAccountingRules</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AllocationKey</Name>
			<DataField>CashFlowForecastPeriodAllocationKey</DataField>
			<DataSource>BudgetParameters</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>BudgetJournal</Name>
			<DataField>LedgerJournalName</DataField>
			<DataSource>BudgetParameters</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CheckRevenueBudgetForZeroBudgetBalances</Name>
			<DataField>CheckRevenueBudgetBalanceOption</DataField>
			<DataSource>BudgetParameters</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DoCompleteRegisterEntriesOnTransferFromDemandForecast</Name>
			<DataField>IsDemandFcstBudgetTransCreateAsCompleted</DataField>
			<DataSource>BudgetParameters</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DoCompleteRegisterEntriesOnTransferFromFixedAssets</Name>
			<DataField>IsAssetBudgetTransCreateAsCompleted</DataField>
			<DataSource>BudgetParameters</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DoCompleteRegisterEntriesOnTransferFromProject</Name>
			<DataField>IsProjectBudgetTransCreateAsCompleted</DataField>
			<DataSource>BudgetParameters</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DoCompleteRegisterEntriesOnTransferFromSupplyForecast</Name>
			<DataField>IsSupplyFcstBudgetTransCreateAsCompleted</DataField>
			<DataSource>BudgetParameters</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ID</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>Key</DataField>
			<DataSource>BudgetParameters</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TimePeriodForBudgetBalances</Name>
			<DataField>CheckRevenueBudgetBalanceInterval</DataField>
			<DataSource>BudgetParameters</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>UseFrenchPublicSectorAccountingRules</Name>
			<DataField>IsFrenchRegulatoryEnabled</DataField>
			<DataSource>BudgetParameters</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>UseRulesForBudgetTransfers</Name>
			<DataField>IsAllowTransferRuleEnabled</DataField>
			<DataSource>BudgetParameters</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>UseGeneralBudgetReservationPublicSectorAccountingRules</Name>
			<DataField>IsBudgetReservationEnabled</DataField>
			<DataSource>BudgetParameters</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DoCompleteRegisterEntriesOnTransferFromFixedAssetsRU</Name>
			<DataField>IsAssetBudgetTransCreateAsCompleted_RU</DataField>
			<DataSource>BudgetParameters</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DeriveAccountStructureFromCombination</Name>
			<DataField>DeriveAccountStructureFromCombination</DataField>
			<DataSource>BudgetParameters</DataSource>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>DataAreaId</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations>
		<AxDataEntityViewRelation xmlns=""
			i:type="AxDataEntityViewRelationForeignKey">
			<Name>LedgerJournalName</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedDataEntity>LedgerJournalNameEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ZeroOne</RelatedDataEntityCardinality>
			<RelatedDataEntityRole>BudgetParametersJournalName</RelatedDataEntityRole>
			<RelationshipType>Association</RelationshipType>
			<Role>BudgetJournalName</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>LedgerJournalNameEntity_Name</Name>
					<Field>BudgetJournal</Field>
					<RelatedField>Name</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
			<Key>EntityKey</Key>
		</AxDataEntityViewRelation>
		<AxDataEntityViewRelation xmlns=""
			i:type="AxDataEntityViewRelationForeignKey">
			<Name>LedgerPeriodAllocationCategory</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedDataEntity>LedgerPeriodAllocationCategoryEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ZeroOne</RelatedDataEntityCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>LedgerPeriodAllocationCategoryEntity_PeriodKey</Name>
					<Field>AllocationKey</Field>
					<RelatedField>PeriodKey</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
			<Key>EntityKey</Key>
		</AxDataEntityViewRelation>
	</Relations>
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>BudgetParameters</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>BudgetParameters</Table>
				<DataSources />
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>