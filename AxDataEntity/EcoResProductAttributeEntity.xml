<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResProductAttributeEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
[OfficeMenuOmit]
public class EcoResProductAttributeEntity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getExtension</Name>
				<Source><![CDATA[
    public TableExtension getExtension()
    {
        return SysTableExtension::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultingDependencies</Name>
				<Source><![CDATA[
    public container getDefaultingDependencies()
    {
        return [
            // [field that needs defaulting,
            //      [fields that affect the default value]]

            [fieldNum(EcoResProductAttributeEntity, FriendlyAttributeName)]
        ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultField</Name>
				<Source><![CDATA[
    public void defaultField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(EcoResProductAttributeEntity, FriendlyAttributeName):
                if (!this.isFieldSet(fieldNum(EcoResProductAttributeEntity, FriendlyAttributeName)) && !this.FriendlyAttributeName)
                {
                    this.FriendlyAttributeName = this.AttributeName;
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapEntityToDataSource</Name>
				<Source><![CDATA[
    public void mapEntityToDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        super(_entityCtx, _dataSourceCtx);

        switch (_dataSourceCtx.name())
        {
            case dataEntityDataSourceStr(EcoResProductAttributeEntity, EcoResAttributeTranslation):
                EcoResAttributeTranslation ecoResAttributeTranslation = _dataSourceCtx.getBuffer();
                ecoResAttributeTranslation.Language = SystemParameters::getSystemLanguageId();
                break;

            case dataEntityDataSourceStr(EcoResProductAttributeEntity, EcoResAttributeValueEntity):
                EcoResAttributeValueEntity buffer = _dataSourceCtx.getBuffer();
                buffer.ProductAttributeTypeName = this.ProductAttributeTypeName;

                this.setFieldStateSetForAttributeType(buffer);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertEntityDataSource</Name>
				<Source><![CDATA[
    public boolean insertEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        boolean ret;

        if (_dataSourceCtx.name() == dataEntityDataSourceStr(EcoResProductAttributeEntity, EcoResAttributeDefaultValue))
        {
            EcoResAttributeDefaultValue attributeDefaultValue = _dataSourceCtx.getBuffer();
            if (!attributeDefaultValue.Value)
            {
                //Attribute default value will not be saved if it is empty
                _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
                _dataSourceCtx.setDataSaved(true);
            }
        }
        ret = super(_entityCtx, _dataSourceCtx);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultCTQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the default change tracking query.
    /// </summary>
    /// <returns>The default change tracking query.</returns>
    public static Query defaultCTQuery()
    {
        Query changeTrackingQuery = new Query();

        var ecoResAttributeDS = changeTrackingQuery.addDataSource(tableNum(EcoResAttribute));
        var ecoResAttributeDSRange = ecoResAttributeDS.addRange(fieldNum(EcoResAttribute, AttributeModifier));
        ecoResAttributeDSRange.value(queryValue(EcoResAttributeModifier::Catalog));
        ecoResAttributeDSRange.status(RangeStatus::Hidden);

        var ecoResAttributeTypeDS = ecoResAttributeDS.addDataSource(tableNum(EcoResAttributeType));
        ecoResAttributeTypeDS.joinMode(JoinMode::InnerJoin);
        ecoResAttributeTypeDS.fetchMode(QueryFetchMode::One2One);
        ecoResAttributeTypeDS.relations(true);
        var dataTypeDSRange = ecoResAttributeTypeDS.addRange(fieldNum(EcoResAttributeType, DataType));
        dataTypeDSRange.value(queryValue(strFmt('!%1', AttributeDataType::Reference)));
        dataTypeDSRange.status(RangeStatus::Hidden);
        var isHiddenDSRange = ecoResAttributeTypeDS.addRange(fieldNum(EcoResAttributeType, IsHidden));
        isHiddenDSRange.value(queryValue(NoYes::No));
        isHiddenDSRange.status(RangeStatus::Hidden);

        var ecoResAttributeTranslationDS = ecoResAttributeDS.addDataSource(tableNum(EcoResAttributeTranslation));
        ecoResAttributeTranslationDS.joinMode(JoinMode::OuterJoin);
        ecoResAttributeTranslationDS.fetchMode(QueryFetchMode::One2One);
        ecoResAttributeTranslationDS.relations(false);
        ecoResAttributeTranslationDS.addLink(fieldNum(EcoResAttribute, RecId), fieldNum(EcoResAttributeTranslation, Attribute), ecoResAttributeDS.name());
        ecoResAttributeTranslationDS.addLink(fieldNum(EcoResAttribute, Partition), fieldNum(EcoResAttributeTranslation, Partition), ecoResAttributeDS.name());
        
        var ecoResProductSystemLanguageSystemParametersDS = ecoResAttributeTranslationDS.addDataSource(tableNum(SystemParameters));
        ecoResProductSystemLanguageSystemParametersDS.joinMode(JoinMode::OuterJoin);
        ecoResProductSystemLanguageSystemParametersDS.fetchMode(QueryFetchMode::One2One);
        ecoResProductSystemLanguageSystemParametersDS.relations(false);
        ecoResProductSystemLanguageSystemParametersDS.addLink(fieldNum(EcoResAttributeTranslation, Partition), fieldNum(SystemParameters, Partition), ecoResAttributeTranslationDS.name());
        ecoResProductSystemLanguageSystemParametersDS.addLink(fieldNum(EcoResAttributeTranslation, Language), fieldNum(SystemParameters, SystemLanguageId), ecoResAttributeTranslationDS.name());

        var ecoResAttributeDefaultValueDS = ecoResAttributeDS.addDataSource(tableNum(EcoResAttributeDefaultValue));
        ecoResAttributeDefaultValueDS.joinMode(JoinMode::OuterJoin);
        ecoResAttributeDefaultValueDS.fetchMode(QueryFetchMode::One2One);
        ecoResAttributeDefaultValueDS.relations(true);

        var ecoResValueDS = ecoResAttributeDefaultValueDS.addDataSource(tableNum(EcoResValue));
        ecoResValueDS.joinMode(JoinMode::OuterJoin);
        ecoResValueDS.fetchMode(QueryFetchMode::One2One);
        ecoResValueDS.relations(false);
        ecoResValueDS.addLink(fieldNum(EcoResAttributeDefaultValue, Value), fieldNum(EcoResValue, RecId), ecoResAttributeDefaultValueDS.name());

        return changeTrackingQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFieldStateSetForAttributeType</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets field state of table buffer based on <c>AttributeDataType</c>.
    /// </summary>
    /// <param name = "_buffer">
    ///     A table buffer having attribute values.
    /// </param>
    protected void setFieldStateSetForAttributeType(EcoResAttributeValueEntity _buffer)
    {
        EcoResAttributeType ecoResAttributeType = EcoResAttributeType::findByName(this.ProductAttributeTypeName);

        switch (ecoResAttributeType.DataType)
        {
            case AttributeDataType::Currency:
                _buffer.fieldState(fieldNum(EcoResAttributeValueEntity, CurrencyValue), FieldState::Set);
                break;

            case AttributeDataType::DateTime:
                _buffer.fieldState(fieldNum(EcoResAttributeValueEntity, DateTimeValue), FieldState::Set);
                break;

            case AttributeDataType::Decimal:
                _buffer.fieldState(fieldNum(EcoResAttributeValueEntity, DecimalValue), FieldState::Set);
                break;

            case AttributeDataType::Integer:
                _buffer.fieldState(fieldNum(EcoResAttributeValueEntity, IntegerValue), FieldState::Set);
                break;

            case AttributeDataType::Text:
                _buffer.fieldState(fieldNum(EcoResAttributeValueEntity, TextValue), FieldState::Set);
                break;

            case AttributeDataType::TrueFalse:
                _buffer.fieldState(fieldNum(EcoResAttributeValueEntity, BooleanValue), FieldState::Set);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteEntityDataSource</Name>
				<Source><![CDATA[
    public boolean deleteEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        switch(_dataSourceCtx.name())
        {
            case dataEntityDataSourceStr(EcoResProductAttributeEntity, EcoResAttributeValueEntity):
                return this.deleteEcoResValue(_dataSourceCtx);

            case dataEntityDataSourceStr(EcoResProductAttributeEntity, EcoResAttribute):
                _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::Delete);
                _dataSourceCtx.setDataSaved(false);
                break;
        }

        return super(_entityCtx, _dataSourceCtx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteEcoResValue</Name>
				<Source><![CDATA[
    private boolean deleteEcoResValue(DataEntityDataSourceRuntimeContext _valueDataSourceCtx)
    {
        EcoResAttributeValueEntity valueEntity = _valueDataSourceCtx.getBuffer();
        EcoResValue value = EcoResValue::find(valueEntity.RecId, true);

        if (value)
        {
            if (!_valueDataSourceCtx.skipValidateDelete())
            {
                if (!value.validateDelete())
                {
                    checkFailed(strfmt("@ApplicationPlatform:DataEntitiesDataSourceValidateDeleteFailed", _valueDataSourceCtx.name(), tableid2name(value.tableId)));
                    throw Exception::ViewDataSourceValidation;
                }
            }

            if (!_valueDataSourceCtx.skipDataMethods())
            {
                value.delete();
            }
            else
            {
                value.doDelete();
            }

            _valueDataSourceCtx.setDataSaved(true);
        }

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SCM:ProductAttributesDevDoc</DeveloperDocumentation>
	<FormRef>EcoResAttribute</FormRef>
	<Label>@SCM:ProductAttributes</Label>
	<Tags>Product attributes</Tags>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>EcoResProductAttributeStaging</DataManagementStagingTable>
	<IsPublic>Yes</IsPublic>
	<Modules>ProductInformationManagement</Modules>
	<PrimaryKey>EntityKey</PrimaryKey>
	<PublicCollectionName>ProductAttributes</PublicCollectionName>
	<PublicEntityName>ProductAttribute</PublicEntityName>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProductAttributeTypeName</Name>
			<AllowEdit>No</AllowEdit>
			<Label>@SCM:AttributeType</Label>
			<Mandatory>Yes</Mandatory>
			<DataField>Name</DataField>
			<DataSource>EcoResAttributeType</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AttributeName</Name>
			<DataField>Name</DataField>
			<DataSource>EcoResAttribute</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AttributeDescription</Name>
			<DataField>Description</DataField>
			<DataSource>EcoResAttributeTranslation</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DefaultCurrencyCode</Name>
			<Label>@SCM:DefaultCurrencyCode</Label>
			<Mandatory>No</Mandatory>
			<DataField>CurrencyCode</DataField>
			<DataSource>EcoResAttributeValueEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DefaultCurrencyValue</Name>
			<Label>@SCM:DefaultCurrencyValue</Label>
			<Mandatory>No</Mandatory>
			<DataField>CurrencyValue</DataField>
			<DataSource>EcoResAttributeValueEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DefaultBooleanValue</Name>
			<Label>@SCM:DefaultBooleanValue</Label>
			<Mandatory>No</Mandatory>
			<DataField>BooleanValue</DataField>
			<DataSource>EcoResAttributeValueEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DefaultDateTimeValue</Name>
			<Label>@SCM:DefaultDateTimeValue</Label>
			<Mandatory>No</Mandatory>
			<DataField>DateTimeValue</DataField>
			<DataSource>EcoResAttributeValueEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DefaultDecimalValue</Name>
			<Label>@SCM:DefaultDecimalValue</Label>
			<Mandatory>No</Mandatory>
			<DataField>DecimalValue</DataField>
			<DataSource>EcoResAttributeValueEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DefaultIntegerValue</Name>
			<Label>@SCM:DefaultIntegerValue</Label>
			<Mandatory>No</Mandatory>
			<DataField>IntegerValue</DataField>
			<DataSource>EcoResAttributeValueEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DefaultTextValue</Name>
			<Label>@SCM:DefaultTextValue</Label>
			<Mandatory>No</Mandatory>
			<DataField>TextValue</DataField>
			<DataSource>EcoResAttributeValueEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Language</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>Language</DataField>
			<DataSource>EcoResAttributeTranslation</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>FriendlyAttributeName</Name>
			<Mandatory>No</Mandatory>
			<DataField>FriendlyName</DataField>
			<DataSource>EcoResAttributeTranslation</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AttributeHelpText</Name>
			<DataField>HelpText</DataField>
			<DataSource>EcoResAttributeTranslation</DataSource>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>ProductAttributeTypeName</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>AttributeName</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>EcoResAttribute</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>EcoResAttribute</Table>
				<DataSources>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>EcoResAttributeSystemLanguage</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>EcoResAttributeSystemLanguage</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>RecId</Field>
								<JoinDataSource>EcoResAttribute</JoinDataSource>
								<RelatedField>EcoResAttribute</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>EcoResAttributeType</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>EcoResAttributeType</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges>
							<AxQuerySimpleDataSourceRange>
								<Name>DataType</Name>
								<Field>DataType</Field>
								<Status>Hidden</Status>
								<Value>!= Reference</Value>
							</AxQuerySimpleDataSourceRange>
							<AxQuerySimpleDataSourceRange>
								<Name>IsHidden</Name>
								<Field>IsHidden</Field>
								<Status>Hidden</Status>
								<Value>No</Value>
							</AxQuerySimpleDataSourceRange>
						</Ranges>
						<UseRelations>Yes</UseRelations>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>EcoResAttributeType</Name>
								<JoinRelationName>EcoResAttributeType</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>EcoResAttributeTranslation</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>EcoResAttributeTranslation</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>SystemLanguageId</Field>
								<JoinDataSource>EcoResAttributeSystemLanguage</JoinDataSource>
								<RelatedField>Language</RelatedField>
							</AxQuerySimpleDataSourceRelation>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation2</Name>
								<Field>RecId</Field>
								<JoinDataSource>EcoResAttribute</JoinDataSource>
								<RelatedField>Attribute</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>EcoResAttributeDefaultValue</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>EcoResAttributeDefaultValue</Table>
						<DataSources>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>EcoResAttributeValueEntity</Name>
								<DynamicFields>Yes</DynamicFields>
								<Table>EcoResAttributeValueEntity</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<JoinMode>OuterJoin</JoinMode>
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1</Name>
										<Field>Value</Field>
										<JoinDataSource>EcoResAttributeDefaultValue</JoinDataSource>
										<RelatedField>RecId</RelatedField>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
						</DataSources>
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<UseRelations>Yes</UseRelations>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>EcoResAttribute</Name>
								<JoinRelationName>EcoResAttribute</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
				</DataSources>
				<DerivedDataSources />
				<Fields />
				<Ranges>
					<AxQuerySimpleDataSourceRange>
						<Name>AttributeModifier</Name>
						<Field>AttributeModifier</Field>
						<Status>Hidden</Status>
						<Value>Catalog</Value>
					</AxQuerySimpleDataSourceRange>
				</Ranges>
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>