<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventQualityOrderLineEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventQualityOrderLineEntity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>mapEntityToDataSource</Name>
				<Source><![CDATA[
    public void mapEntityToDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        super(_entityCtx, _dataSourceCtx);

        if (_dataSourceCtx.name() == dataEntityDataSourceStr(InventQualityOrderLineEntity, InventQualityOrderLine)
            && (_dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Insert
                || _dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Update))
        {
            InventQualityOrderLine inventQualityOrderLine = _dataSourceCtx.getBuffer();

            switch (this.PdsBatchAttribType)
            {
                case PdsBatchAttribType::Integer:
                    inventQualityOrderLine.PdsAttribValue       = int2Str(this.ItemBatchAttributeIntegerValue);
                    inventQualityOrderLine.PdsOrderLineResult   = int2Str(this.QualityTestResultIntegerValue);
                    break;

                case PdsBatchAttribType::Realnumber:
                    inventQualityOrderLine.PdsAttribValue       = PdsBatchAttrib::value2StorageType(PdsBatchAttribType::Realnumber, this.ItemBatchAttributeDecimalValue);
                    inventQualityOrderLine.PdsOrderLineResult   = PdsBatchAttrib::value2StorageType(PdsBatchAttribType::Realnumber, this.QualityTestResultDecimalValue);
                    break;

                case PdsBatchAttribType::Date:
                case PdsBatchAttribType::Enumerate:
                    inventQualityOrderLine.PdsAttribValue  = any2Str(num2Date(str2Num(PdsBatchAttrib::value2StorageType(PdsBatchAttribType::Date, this.ItemBatchAttributeDateValue))));
                    inventQualityOrderLine.PdsOrderLineResult = any2Str(num2Date(str2Num(PdsBatchAttrib::value2StorageType(PdsBatchAttribType::Date, this.QualityTestResultDateValue))));
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemBatchAttributeDateDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the date defining how to compute the itemBatchAttributeDateValue computed field.
    /// </summary>
    /// <returns>
    /// A string to compute the itemBatchAttributeDateValue field.
    /// </returns>
    public static str itemBatchAttributeDateDefinition()
    {
        TableName entityName = tableStr(InventQualityOrderLineEntity);
    
        str calculatedDateString = SysComputedColumn::getDateAdd(
            SysComputedColumn::cast(
                SysComputedColumn::returnField(entityName, dataEntityDataSourceStr(InventQualityOrderLineEntity, InventQualityOrderLine), fieldStr(InventQualityOrderLine, PdsAttribValue)),
                'int'),
            SysComputedColumn::returnLiteral(Global::DateNull()),
            SysComputedColumnDatePart::Day);
    
        return SysComputedColumn::if(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(
                            entityName, dataEntityDataSourceStr(InventQualityOrderLineEntity, PdsBatchAttrib), fieldStr(PdsBatchAttrib, PdsBatchAttribType)),
                            int2Str(enum2Int(PdsBatchAttribType::Date))),
                        calculatedDateString,
                        SysComputedColumn::returnLiteral(Global::DateNull()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>qualityTestResultDateDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the Date defining how to compute the QualityTestResultDateValue computed field.
    /// </summary>
    /// <returns>
    /// A string to compute the QualityTestResultDateValue field.
    /// </returns>
    public static str qualityTestResultDateDefinition()
    {
        TableName entityName = tableStr(InventQualityOrderLineEntity);
    
        str calculatedDateString = SysComputedColumn::getDateAdd(
            SysComputedColumn::cast(
                SysComputedColumn::returnField(entityName, dataEntityDataSourceStr(InventQualityOrderLineEntity, InventQualityOrderLine), fieldStr(InventQualityOrderLine, PdsOrderLineResult)),
                'int'),
            SysComputedColumn::returnLiteral(Global::DateNull()),
            SysComputedColumnDatePart::Day);
    
        return SysComputedColumn::if(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(
                            entityName, dataEntityDataSourceStr(InventQualityOrderLineEntity, PdsBatchAttrib), fieldStr(PdsBatchAttrib, PdsBatchAttribType)),
                            int2Str(enum2Int(PdsBatchAttribType::Date))),
                        calculatedDateString,
                        SysComputedColumn::returnLiteral(Global::DateNull()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>qualityTestResultIntegerDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the Integer defining how to compute the QualityTestResultIntegerValue computed field.
    /// </summary>
    /// <returns>
    /// A string to compute the QualityTestResultIntegerValue field.
    /// </returns>
    public static str qualityTestResultIntegerDefinition()
    {
        return InventQualityOrderLineEntity::qualityTestResultIntegerFieldDefinition(fieldStr(InventQualityOrderLine, PdsOrderLineResult));
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemBatchAttributeIntegerDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the integer defining how to compute the itemBatchAttributeIntegerValue computed field.
    /// </summary>
    /// <returns>
    /// A string to compute the itemBatchAttributeIntegerValue field.
    /// </returns>
    public static str itemBatchAttributeIntegerDefinition()
    {
        return InventQualityOrderLineEntity::ItemBatchAttribIntegerFieldDefinition(fieldStr(InventQualityOrderLine, PdsAttribValue));
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemBatchAttributeDecimalDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the Decimal defining how to compute the itemBatchAttributeDecimalValue computed field.
    /// </summary>
    /// <returns>
    /// A string to compute the itemBatchAttributeDecimalValue field.
    /// </returns>
    public static str itemBatchAttributeDecimalDefinition()
    {
        TableName entityName = tableStr(InventQualityOrderLineEntity);
    
        // The decimal target definition has a different structure than then integer one,
        // because SQL was throwing an error for the empty value: Error converting data type nvarchar to numeric.
        return SysComputedColumn::if(
                    SysComputedColumn::and2(
                        SysComputedColumn::notEqualExpression(
                            SysComputedColumn::returnField(entityName, dataEntityDataSourceStr(InventQualityOrderLineEntity, InventQualityOrderLine), fieldStr(InventQualityOrderLine, PdsAttribValue)),
                            SysComputedColumn::returnLiteral('')),
                        SysComputedColumn::equalExpression(
                            SysComputedColumn::comparisonField(
                                entityName, dataEntityDataSourceStr(InventQualityOrderLineEntity, PdsBatchAttrib), fieldStr(PdsBatchAttrib, PdsBatchAttribType)),
                                int2Str(enum2Int(PdsBatchAttribType::Realnumber)))),
                        SysComputedColumn::returnField(entityName, dataEntityDataSourceStr(InventQualityOrderLineEntity, InventQualityOrderLine), fieldStr(InventQualityOrderLine, PdsAttribValue)),
                        SysComputedColumn::returnLiteral('0.0'));
    }

]]></Source>
			</Method>
			<Method>
				<Name>qualityTestResultDecimalDefinition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the Decimal defining how to compute the QualityTestResultDecimalValue computed field.
    /// </summary>
    /// <returns>
    /// A string to compute the QualityTestResultDecimalValue field.
    /// </returns>
    public static str qualityTestResultDecimalDefinition()
    {
        TableName entityName = tableStr(InventQualityOrderLineEntity);
    
        // The decimal target definition has a different structure than then integer one,
        // because SQL was throwing an error for the empty value: Error converting data type nvarchar to numeric.
        return SysComputedColumn::if(
                    SysComputedColumn::and2(
                        SysComputedColumn::notEqualExpression(
                            SysComputedColumn::returnField(entityName, dataEntityDataSourceStr(InventQualityOrderLineEntity, InventQualityOrderLine), fieldStr(InventQualityOrderLine, PdsOrderLineResult)),
                            SysComputedColumn::returnLiteral('')),
                        SysComputedColumn::equalExpression(
                            SysComputedColumn::comparisonField(
                                entityName, dataEntityDataSourceStr(InventQualityOrderLineEntity, PdsBatchAttrib), fieldStr(PdsBatchAttrib, PdsBatchAttribType)),
                                int2Str(enum2Int(PdsBatchAttribType::Realnumber)))),
                        SysComputedColumn::returnField(entityName, dataEntityDataSourceStr(InventQualityOrderLineEntity, InventQualityOrderLine), fieldStr(InventQualityOrderLine, PdsOrderLineResult)),
                        SysComputedColumn::returnLiteral('0.0'));
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemBatchAttribIntegerFieldDefinition</Name>
				<Source><![CDATA[
    private static str itemBatchAttribIntegerFieldDefinition(FieldName _fieldName)
    {
        return InventQualityOrderLineEntity::FieldDefinition(PdsBatchAttribType::Integer, _fieldName, '0');
    }

]]></Source>
			</Method>
			<Method>
				<Name>qualityTestResultintegerFieldDefinition</Name>
				<Source><![CDATA[
    private static str qualityTestResultintegerFieldDefinition(FieldName _fieldName)
    {
        return InventQualityOrderLineEntity::FieldDefinition(PdsBatchAttribType::Integer, _fieldName, '0');
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldDefinition</Name>
				<Source><![CDATA[
    private static str fieldDefinition(PdsBatchAttribType _batchAttributeType, FieldName _fieldName, str _nullLiteral)
    {
        TableName entityName = tableStr(InventQualityOrderLineEntity);
    
        return SysComputedColumn::if(
                    SysComputedColumn::equalExpression(
                        SysComputedColumn::comparisonField(
                            entityName, dataEntityDataSourceStr(InventQualityOrderLineEntity, PdsBatchAttrib), fieldStr(PdsBatchAttrib, PdsBatchAttribType)),
                            int2Str(enum2Int(_batchAttributeType))),
                        SysComputedColumn::returnField(entityName, dataEntityDataSourceStr(InventQualityOrderLineEntity, InventQualityOrderLine), _fieldName),
                        SysComputedColumn::returnLiteral(_nullLiteral));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>InventQualityManagement</ConfigurationKey>
	<DeveloperDocumentation>@SCM:InventQualityOrderLineEntityDevDocumentation</DeveloperDocumentation>
	<FormRef>InventQualityOrderTable</FormRef>
	<Label>@SCM:InventQualityOrderLineEntityLabel</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>InventQualityOrderLineStaging</DataManagementStagingTable>
	<EntityCategory>Document</EntityCategory>
	<Modules>InventoryAndWarehouseManagement</Modules>
	<PrimaryCompanyContext>DataAreaId</PrimaryCompanyContext>
	<PrimaryKey>EntityKey</PrimaryKey>
	<SupportsSetBasedSqlOperations>Yes</SupportsSetBasedSqlOperations>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AcceptableQualityLevelPercentage</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FailureAction</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsCertificateOfAnalysisReportIncludingTestMeasurement</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsTestResultValidationIncludingLine</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AcceptableQuantitativeLowerTestMeasurementLimit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AcceptableQuantitativeLowerTestMeasurementLimitPercentage</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemBatchAttributeValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemBatchAttributeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsItemBatchAttributeValueOverridden</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QualityTestResultValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsBatchAttributeValueDefaultedWithTestMeasurement</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QualityOrderNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StandardQuantitativeTestMeasurement</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QualityTestId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QualityTestInstrumentId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QualityTestOutcomeStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QualityOrderSequenceNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TestMeasurementUnitSymbol</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AcceptableQuantitativeUpperTestMeasurementLimit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AcceptableQuantitativeUpperTestMeasurementLimitPercentage</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QualityTestVariableId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DefaultQualitativeTestMeasurementOutcome</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AcceptableQualityLevelPercentage</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>Yes</Mandatory>
			<DataField>AcceptableQualityLevel</DataField>
			<DataSource>InventQualityOrderLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>FailureAction</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<DataField>ActionOnFailure</DataField>
			<DataSource>InventQualityOrderLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>IsCertificateOfAnalysisReportIncludingTestMeasurement</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<DataField>CertificateOfAnalysisReport</DataField>
			<DataSource>InventQualityOrderLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>IsTestResultValidationIncludingLine</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<DataField>IncludeResults</DataField>
			<DataSource>InventQualityOrderLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AcceptableQuantitativeLowerTestMeasurementLimit</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<DataField>LowerLimit</DataField>
			<DataSource>InventQualityOrderLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AcceptableQuantitativeLowerTestMeasurementLimitPercentage</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<DataField>LowerTolerance</DataField>
			<DataSource>InventQualityOrderLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ItemBatchAttributeId</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<DataField>PdsBatchAttribId</DataField>
			<DataSource>PdsBatchAttrib</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>IsItemBatchAttributeValueOverridden</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<DataField>PdsBatchAttribOverride</DataField>
			<DataSource>InventQualityOrderLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>QualityTestResultValue</Name>
			<AccessModifier>Private</AccessModifier>
			<Mandatory>No</Mandatory>
			<DataField>PdsOrderLineResult</DataField>
			<DataSource>InventQualityOrderLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>IsBatchAttributeValueDefaultedWithTestMeasurement</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<DataField>PdsUpdateBatchAttributes</DataField>
			<DataSource>InventQualityOrderLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>QualityOrderNumber</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>Yes</Mandatory>
			<DataField>QualityOrderId</DataField>
			<DataSource>InventQualityOrderLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>StandardQuantitativeTestMeasurement</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<DataField>StandardValue</DataField>
			<DataSource>InventQualityOrderLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>QualityTestId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>Yes</Mandatory>
			<DataField>TestId</DataField>
			<DataSource>InventQualityOrderLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>QualityTestInstrumentId</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<DataField>TestInstrumentId</DataField>
			<DataSource>InventQualityOrderLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>QualityTestOutcomeStatus</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<DataField>TestResult</DataField>
			<DataSource>InventQualityOrderLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>QualityOrderSequenceNumber</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>Yes</Mandatory>
			<DataField>TestSequence</DataField>
			<DataSource>InventQualityOrderLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TestMeasurementUnitSymbol</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<DataField>TestUnitId</DataField>
			<DataSource>InventQualityOrderLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AcceptableQuantitativeUpperTestMeasurementLimit</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<DataField>UpperLimit</DataField>
			<DataSource>InventQualityOrderLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AcceptableQuantitativeUpperTestMeasurementLimitPercentage</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<DataField>UpperTolerance</DataField>
			<DataSource>InventQualityOrderLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>QualityTestVariableId</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<DataField>VariableId</DataField>
			<DataSource>InventQualityOrderLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DefaultQualitativeTestMeasurementOutcome</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<DataField>VariableOutcomeIdStandard</DataField>
			<DataSource>InventQualityOrderLine</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldInt">
			<Name>ItemBatchAttributeIntegerValue</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<ConfigurationKey>PdsBatchAttrib</ConfigurationKey>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>itemBatchAttributeIntegerDefinition</ComputedFieldMethod>
			<ExtendedDataType>Integer</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldInt">
			<Name>QualityTestResultIntegerValue</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<ConfigurationKey>PdsBatchAttrib</ConfigurationKey>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>qualityTestResultIntegerDefinition</ComputedFieldMethod>
			<ExtendedDataType>Integer</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>QualityTestResultDecimalValue</Name>
			<ConfigurationKey>PdsBatchAttrib</ConfigurationKey>
			<ComputedFieldMethod>qualityTestResultDecimalDefinition</ComputedFieldMethod>
			<ExtendedDataType>RealBase</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldDate">
			<Name>QualityTestResultDateValue</Name>
			<ConfigurationKey>PdsBatchAttrib</ConfigurationKey>
			<ComputedFieldMethod>qualityTestResultDateDefinition</ComputedFieldMethod>
			<ExtendedDataType>BaseDate</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldReal">
			<Name>ItemBatchAttributeDecimalValue</Name>
			<ConfigurationKey>PdsBatchAttrib</ConfigurationKey>
			<ComputedFieldMethod>itemBatchAttributeDecimalDefinition</ComputedFieldMethod>
			<ExtendedDataType>RealBase</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldDate">
			<Name>ItemBatchAttributeDateValue</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<ConfigurationKey>PdsBatchAttrib</ConfigurationKey>
			<Mandatory>No</Mandatory>
			<ComputedFieldMethod>itemBatchAttributeDateDefinition</ComputedFieldMethod>
			<ExtendedDataType>BaseDate</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PdsBatchAttribType</Name>
			<DataField>PdsBatchAttribType</DataField>
			<DataSource>PdsBatchAttrib</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ItemBatchAttributeValue</Name>
			<AccessModifier>Private</AccessModifier>
			<Mandatory>No</Mandatory>
			<DataField>PdsAttribValue</DataField>
			<DataSource>InventQualityOrderLine</DataSource>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>QualityOrderNumber</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>QualityOrderSequenceNumber</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations>
		<AxDataEntityViewRelation>
			<Name>InventQualityOrderLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedDataEntity>InventQualityOrderLine</RelatedDataEntity>
			<RelatedDataEntityCardinality>ZeroOne</RelatedDataEntityCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>RelationConstraintField1</Name>
					<Field>QualityOrderNumber</Field>
					<RelatedField>QualityOrderId</RelatedField>
				</AxDataEntityViewRelationConstraint>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>RelationConstraintField2</Name>
					<Field>QualityOrderSequenceNumber</Field>
					<RelatedField>TestSequence</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
		</AxDataEntityViewRelation>
	</Relations>
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>InventQualityOrderLine</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>InventQualityOrderLine</Table>
				<DataSources>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>PdsBatchAttrib</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>PdsBatchAttrib</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>PdsBatchAttribId</Field>
								<JoinDataSource>InventQualityOrderLine</JoinDataSource>
								<RelatedField>PdsBatchAttribId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
				</DataSources>
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>