<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankJournalHeaderEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BankJournalHeaderEntity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        if (ret)
        {
            switch (_fieldIdToCheck)
            {
                case fieldNum(BankJournalHeaderEntity, JournalName):
                    LedgerJournalName ledgerJournalName = ledgerJournalName::find(this.JournalName);

                    if (ledgerJournalName && !this.isValidJournalType(ledgerJournalName.JournalType))
                    {
                        ret = checkFailed(strFmt("@SYS22977", this.getValidJournalTypeLabels()));
                    }
                    break;

                case fieldNum(BankJournalHeaderEntity, JournalBatchNumber):

                    if (!LedgerJournalEntityBase::isJournalBatchNumberSequenceManual())
                    {
                        ret = NumberSeq::numCheckFormat(this.JournalBatchNumber, NumberSeqReference::findReference(extendedtypenum(LedgerJournalId)).numberSequenceTable());
                    }
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidJournalType</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates the ledger journal type.
    /// </summary>
    /// <param name = "_journalType">
    ///     The ledger journal type.
    /// </param>
    /// <returns>
    ///     true if ledger journal type is valid; otherwise, false.
    /// </returns>
    protected boolean isValidJournalType(LedgerJournalType _journalType)
    {
        return _journalType == LedgerJournalType::Daily;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getValidJournalTypeLabels</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the valid ledger journal type labels.
    /// </summary>
    /// <returns>
    ///     Ledger journal type Daily string.
    /// </returns>
    protected str getValidJournalTypeLabels()
    {
        return strFmt('%1', LedgerJournalType::Daily);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapEntityToDataSource</Name>
				<Source><![CDATA[
    public void mapEntityToDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        super(_entityCtx, _dataSourceCtx);

        if (_entityCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Insert)
        {
            switch (_dataSourceCtx.name())
            {
                case dataentitydatasourcestr(BankJournalHeaderEntity, LedgerJournalTable):
                    LedgerJournalTable ledgerJournalTable = _dataSourceCtx.getBuffer();

                    // If a journal number was provided, mark it as defaulted so that it doesn't get re-defaulted
                    // on insert
                    if (ledgerJournalTable.isFieldSet(fieldnum(LedgerJournalTable, JournalNum)))
                    {
                        ledgerJournalTable.fieldState(fieldnum(LedgerJournalTable, JournalNum), FieldState::Defaulted);
                    }
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postGetStagingData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the journal staging table after population.
    /// </summary>
    /// <param name = "_dmfDefinitionGroupExecution">The data management framework definition group being executed.</param>
    /// <remarks>This method is called automatically by the data management framework.</remarks>
    public static void postGetStagingData(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution)
    {
        BankJournalHeaderStaging headerStaging;

        if (!LedgerJournalEntityBase::isJournalBatchNumberSequenceManual())
        {
            LedgerJournalEntityBaseTmp journalBatchNumberMap = LedgerJournalEntityBase::generateJournalNumbers(_dmfDefinitionGroupExecution, headerStaging);

            update_recordset headerStaging
                setting JournalBatchNumber = journalBatchNumberMap.NewJournalBatchNumber
                where headerStaging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                    && headerStaging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                    && headerStaging.TransferStatus == DMFTransferStatus::NotStarted
            join NewJournalBatchNumber from journalBatchNumberMap
                where headerStaging.JournalBatchNumber == journalBatchNumberMap.OldJournalBatchNumber;

            BankJournalLineStaging lineStaging;

            update_recordset lineStaging
            setting JournalBatchNumber = journalBatchNumberMap.NewJournalBatchNumber
            where lineStaging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                && lineStaging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                && lineStaging.TransferStatus == DMFTransferStatus::NotStarted
            join NewJournalBatchNumber from journalBatchNumberMap
            where lineStaging.JournalBatchNumber == journalBatchNumberMap.OldJournalBatchNumber;
        }

    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Bank</ConfigurationKey>
	<FormRef>LedgerJournalTable</FormRef>
	<Label>@CashManagement:BankJournalHeaderEntity</Label>
	<Tags>Journal</Tags>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>BankJournalHeaderStaging</DataManagementStagingTable>
	<EntityCategory>Document</EntityCategory>
	<Modules>CashAndBankManagement</Modules>
	<PrimaryCompanyContext>DataAreaId</PrimaryCompanyContext>
	<PrimaryKey>EntityKey</PrimaryKey>
	<SupportsSetBasedSqlOperations>Yes</SupportsSetBasedSqlOperations>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>JournalName</Name>
			<DataField>JournalName</DataField>
			<DataSource>LedgerJournalTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>JournalBatchNumber</Name>
			<Mandatory>No</Mandatory>
			<DataField>JournalNum</DataField>
			<DataSource>LedgerJournalTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>IsPosted</Name>
			<DataField>Posted</DataField>
			<DataSource>LedgerJournalTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Description</Name>
			<DataField>Name</DataField>
			<DataSource>LedgerJournalTable</DataSource>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>JournalBatchNumber</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings>
		<AxTableMapping>
			<MappingTable>LedgerJournalEntityBase</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>Description</MapField>
					<MapFieldTo>Description</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>JournalBatchNumber</MapField>
					<MapFieldTo>JournalBatchNumber</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>JournalName</MapField>
					<MapFieldTo>JournalName</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Ranges />
	<Relations>
		<AxDataEntityViewRelation>
			<Name>JournalName</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedDataEntity>LedgerJournalNameEntity</RelatedDataEntity>
			<RelatedDataEntityCardinality>ExactlyOne</RelatedDataEntityCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxDataEntityViewRelationConstraint xmlns=""
					i:type="AxDataEntityViewRelationConstraintField">
					<Name>RelationConstraintField1</Name>
					<Field>JournalName</Field>
					<RelatedField>Name</RelatedField>
				</AxDataEntityViewRelationConstraint>
			</Constraints>
		</AxDataEntityViewRelation>
	</Relations>
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>LedgerJournalTable</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>LedgerJournalTable</Table>
				<DataSources />
				<DerivedDataSources />
				<Fields />
				<Ranges>
					<AxQuerySimpleDataSourceRange>
						<Name>JournalType</Name>
						<Field>JournalType</Field>
						<Value>Daily</Value>
					</AxQuerySimpleDataSourceRange>
				</Ranges>
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>